<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>前言</title>
      <link href="/2018/05/24/forward/"/>
      <url>/2018/05/24/forward/</url>
      <content type="html"><![CDATA[<div id="music163player" align="center" ><br>    <img src="https://picsum.photos/1920/1080/?random" width = 90% height = 50% alt="前言" ><br></div><p>  由于之前的博客几乎都在简书，虽然也是md，但是内容格式有所区别，还是以后慢慢移吧</p><a id="more"></a><h2 id="本文没有多余的内容"><a href="#本文没有多余的内容" class="headerlink" title="本文没有多余的内容"></a>本文没有多余的内容</h2>]]></content>
      
      
        <tags>
            
            <tag> 前言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ButterKnife</title>
      <link href="/2018/05/23/ButterKnife/"/>
      <url>/2018/05/23/ButterKnife/</url>
      <content type="html"><![CDATA[<p>ButterKnife 8.1</p><div id="music163player" align="center" ><br>    <img src="http://jakewharton.github.io/butterknife/static/logo.png" width = 50% height = 40% alt="ButterKnife" ><br></div><a id="more"></a><p>项目地址：<a href="https://github.com/JakeWharton/butterknife">https://github.com/JakeWharton/butterknife</a><br>AS插件：Android Butterknife Zelezny</p><h2 id="一、优点"><a href="#一、优点" class="headerlink" title="一、优点"></a>一、优点</h2><p>1） 强大的View绑定和Click事件处理功能，简化代码，提升开发效率 </p><p>2）方便的处理Adaper里的ViewHolder绑定问题 </p><p>3） 运行时不会影响app效率，使用配置方便 </p><p>4）代码清晰，可读性强</p><h2 id="二、添加依赖"><a href="#二、添加依赖" class="headerlink" title="二、添加依赖"></a>二、添加依赖</h2><p>在module的build.gradle 文件中的dependencies标签中添加代码如下（导入库的依赖）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;  </span><br><span class="line">  compile &apos;com.jakewharton:butterknife:8.8.1&apos;  </span><br><span class="line">  annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.8.1&apos;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在module的build.gradle 文件中设置支持插件 ，添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.library&apos;  </span><br><span class="line">apply plugin: &apos;com.jakewharton.butterknife&apos;</span><br></pre></td></tr></table></figure></p><p><code>（注：这条是开发者给出的配置，目前不加此配置也是不影响正常使用的，但小区别还是有的（eg：R2.id.XXX能否正常使用），是否作此配置看使用者自己吧，本人建议加此配置。）</code></p><h2 id="三、Butter-Knife的注册"><a href="#三、Butter-Knife的注册" class="headerlink" title="三、Butter Knife的注册"></a>三、Butter Knife的注册</h2><h3 id="1-使用注意事项"><a href="#1-使用注意事项" class="headerlink" title="1.使用注意事项"></a>1.使用注意事项</h3><ol><li><p>在Activity 类中绑定 ：ButterKnife.bind(this);必须在setContentView();之后绑定；且父类bind绑定后，子类不需要再bind。</p></li><li><p>在非Activity 类（eg：Fragment、ViewHold）中绑定：ButterKnife.bind(this，view);</p></li></ol><p>这里的this不能替换成getActivity（）。</p><ol start="3"><li><p>在Activity中不需要做解绑操作，在Fragment 中必须在onDestroyView()中做解绑操作。</p></li><li><p>使用ButterKnife修饰的方法和控件，不能用private or static 修饰，否则会报错。</p></li><li><p>setContentView()不能通过注解实现。（其他的有些注解框架可以）</p></li><li><p>使用Activity为根视图绑定任意对象时，如果你使用类似MVC的设计模式你可以在Activity 调用ButterKnife.bind(this, activity)，来绑定Controller。</p></li><li><p>使用ButterKnife.bind(this，view)绑定一个view的子节点字段。如果你在子View的布局里或者自定义view的构造方法里 使用了inflate,你可以立刻调用此方法。或者，从XML inflate来的自定义view类型可以在onFinishInflate回调方法中使用它。</p></li></ol><h3 id="2-在Activity中绑定ButterKnife"><a href="#2-在Activity中绑定ButterKnife" class="headerlink" title="2.在Activity中绑定ButterKnife"></a>2.在Activity中绑定ButterKnife</h3><p>使用：ButterKnife.bind(this);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity&#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">        //绑定初始化ButterKnife  </span><br><span class="line">        ButterKnife.bind(this);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-在Fragment中绑定ButterKnife"><a href="#3-在Fragment中绑定ButterKnife" class="headerlink" title="3.在Fragment中绑定ButterKnife"></a>3.在Fragment中绑定ButterKnife</h3><p>使用：ButterKnife.bind(this, view);</p><p>Fragment的生命周期不同于activity。在onCreateView中绑定一个Fragment时，在onDestroyView中将视图设置为null。</p><p>当你调用bind来为你绑定一个Fragment时,Butter Knife会返回一个Unbinder的实例。</p><p>在适当的生命周期（onDestroyView）回调中调用它的unbind方法进行Fragment解绑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Unbinder unbinder;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,  </span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        View view = inflater.inflate(R.layout.fragment, container, <span class="keyword">false</span>);  </span><br><span class="line">        <span class="comment">//返回一个Unbinder值（进行解绑），注意这里的this不能使用getActivity()  </span></span><br><span class="line">        unbinder = ButterKnife.bind(<span class="keyword">this</span>, view);  </span><br><span class="line">        <span class="keyword">return</span> view;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * onDestroyView中进行解绑操作 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onDestroyView();  </span><br><span class="line">        unbinder.unbind();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="4-在Adapter中绑定ButterKnife"><a href="#4-在Adapter中绑定ButterKnife" class="headerlink" title="4.在Adapter中绑定ButterKnife"></a>4.在Adapter中绑定ButterKnife</h3><p>使用：ButterKnife.bind(this, view);</p><p>在Adapter的ViewHolder中使用，将ViewHolder加一个构造方法，在new ViewHolder的时候把view传递进去。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// 部分代码省略...  </span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span>   </span><br><span class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View view, ViewGroup parent)</span> </span>&#123;  </span><br><span class="line">    ViewHolder holder;  </span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;  </span><br><span class="line">      holder = (ViewHolder) view.getTag();  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      view = inflater.inflate(R.layout.testlayout, parent, <span class="keyword">false</span>);  </span><br><span class="line">      holder = <span class="keyword">new</span> ViewHolder(view);  </span><br><span class="line">      view.setTag(holder);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    holder.name.setText(<span class="string">"诺诺"</span>);  </span><br><span class="line">    <span class="comment">// etc...  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> view;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@BindView</span>(R.id.title) TextView name;  </span><br><span class="line">    <span class="meta">@BindView</span>(R.id.job_title) TextView jobTitle;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;  </span><br><span class="line">      ButterKnife.bind(<span class="keyword">this</span>, view);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><h2 id="四、Butter-Knife的使用"><a href="#四、Butter-Knife的使用" class="headerlink" title="四、Butter Knife的使用"></a>四、Butter Knife的使用</h2><h3 id="1-使用注意事项-1"><a href="#1-使用注意事项-1" class="headerlink" title="1.使用注意事项"></a>1.使用注意事项</h3><p>1）ButterKinfe的注解标签因版本不同而有所变化。8.0.0之前的Bind标签在8.0.0之后变成了BindView，</p><p>而8.7.0之后在绑定view时，要用R2.id.XXX，而不再是常用的R.id.XXX。</p><p>Note：我在实际使用时用R.id.XXX和R2.id.XXX都可以，目前本人并未发现有什么异常。自动生成代码时是R.id.XXX；建议使用R2.id.XXX。因为网上都说使用R2是因为library中的R字段的id值不是final类型的，但是你的应用module中确是final类型的……</p><p>2）默认情况下，@bind和 listener 的绑定是必需的。如果无法找到目标视图，将抛出一个异常。<br>要抑制此行为并创建可选绑定，可以将@Nullable注解添加到字段中，或将@Optional注解添加到方法。</p><p>Note:任何被命名为@Nullable的注解都可以用于成员变量。鼓励使用Android的”support-annotations”库中的@Nullable注解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Nullable  </span><br><span class="line">@BindView(R.id.might_not_be_there)   </span><br><span class="line">TextView mightNotBeThere;  </span><br><span class="line">  </span><br><span class="line">@Optional  </span><br><span class="line">@OnClick(R.id.maybe_missing)   </span><br><span class="line">public void onMaybeMissingClicked() &#123;  </span><br><span class="line">    // TODO ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-绑定注解"><a href="#2-绑定注解" class="headerlink" title="2.绑定注解"></a>2.绑定注解</h3><p>@BindView—-&gt;绑定一个view；id为一个view 变量</p><p>@BindViews  —-&gt;<br> 绑定多个view；id为一个view的list变量</p><p>@BindArray—-&gt;<br> 绑定string里面array数组；@BindArray(R.array.city ) String[] citys ;</p><p>@BindBitmap—-&gt;绑定图片资源为Bitmap；@BindBitmap(<br> R.mipmap.wifi ) Bitmap bitmap;</p><p>@BindBool —-&gt;绑定boolean值</p><p>@BindColor —-&gt;绑定color；@BindColor(R.color.colorAccent)<br> int black;</p><p>@BindDimen —-&gt;绑定Dimen；@BindDimen(R.dimen.borth_width)<br> int mBorderWidth;</p><p>@BindDrawable<br>—-&gt; 绑定Drawable；@BindDrawable(R.drawable.test_pic) Drawable mTestPic;</p><p>@BindFloat —-&gt;绑定float</p><p>@BindInt —-&gt;绑定int</p><p>@BindString —-&gt;绑定一个String id为一个String变量；@BindString(<br> R.string.app_name ) String meg;</p><h3 id="3-事件注解"><a href="#3-事件注解" class="headerlink" title="3.事件注解"></a>3.事件注解</h3><p>(注：此处作个统计，后面会有详细解释)</p><p>@OnClick—-&gt;点击事件<br>@OnCheckedChanged —-&gt;选中，取消选中<br>@OnEditorAction —-&gt;软键盘的功能键<br>@OnFocusChange —-&gt;焦点改变<br>@OnItemClick item—-&gt;被点击(注意这里有坑，如果item里面有Button等这些有点击的控件事件的，需要设置这些控件属性focusable为false)<br>@OnItemLongClick item—-&gt;长按(返回真可以拦截onItemClick)<br>@OnItemSelected —-&gt;item被选择事件<br>@OnLongClick —-&gt;长按事件<br>@OnPageChange —-&gt;页面改变事件<br>@OnTextChanged —-&gt;EditText里面的文本变化事件<br>@OnTouch —-&gt;触摸事件<br>@Optional —-&gt;</p><p>选择性注入，如果当前对象不存在，就会抛出一个异常，为了压制这个异常，可以在变量或者方法上加入一下注解,让注入变成选择性的,如果目标View存在,则注入, 不存在,则什么事情都不做=如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Optional  </span><br><span class="line">@OnCheckedChanged(R.id.cb_test)  </span><br><span class="line">public void onCheckedChanged(CompoundButton buttonView,boolean isChecked)&#123;  </span><br><span class="line">    if(isChecked)&#123;  </span><br><span class="line">        tvTest.setText(&quot;被选中...&quot;);  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        tvTest.setText(&quot;被取消...&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-绑定view"><a href="#4-绑定view" class="headerlink" title="4.绑定view"></a>4.绑定view</h3><p>1）@BindView() : 布局id 注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@BindView( R2.id.button)  </span><br><span class="line">public Button button;</span><br></pre></td></tr></table></figure><p>2）@BindViews(): 布局内多个控件 id 注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindViews</span>(&#123; R2.id.button1, R2.id.button2,  R2.id.button3&#125;)  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Button&gt; buttonList ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">  </span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);  </span><br><span class="line">  </span><br><span class="line">        buttonList.get( <span class="number">0</span> ).setText( <span class="string">"hello 1 "</span>);  </span><br><span class="line">        buttonList.get( <span class="number">1</span> ).setText( <span class="string">"hello 2 "</span>);  </span><br><span class="line">        buttonList.get( <span class="number">2</span> ).setText( <span class="string">"hello 3 "</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><h3 id="5-绑定资源"><a href="#5-绑定资源" class="headerlink" title="5.绑定资源"></a>5.绑定资源</h3><p>1）@BindString() ：绑定string 字符串<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindView</span>(R2.id.button) <span class="comment">//绑定button 控件  </span></span><br><span class="line">    <span class="keyword">public</span> Button button ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindString</span>(R2.string.app_name)  <span class="comment">//绑定资源文件中string字符串  </span></span><br><span class="line">    String str;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">        button.setText( str );  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>2）@BindArray() : 绑定string里面array数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;  </span><br><span class="line">    &lt;string name=&quot;app_name&quot;&gt;城市&lt;/string&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;string-array name=&quot;city&quot;&gt;  </span><br><span class="line">        &lt;item&gt;北京市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;天津市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;哈尔滨市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;大连市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;香港市&lt;/item&gt;  </span><br><span class="line">    &lt;/string-array&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindView</span>(R2.id.button) <span class="comment">//绑定button 控件  </span></span><br><span class="line">    <span class="keyword">public</span> Button button ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindString</span>(R2.string.app_name)  <span class="comment">//绑定资源文件中string字符串  </span></span><br><span class="line">    String str;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindArray</span>(R2.array.city)  <span class="comment">//绑定string里面array数组  </span></span><br><span class="line">    String [] citys ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">        button.setText(citys[<span class="number">0</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>3）@BindBitmap( ) : 绑定Bitmap 资源<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindView</span>( R2.id.imageView ) <span class="comment">//绑定ImageView 控件  </span></span><br><span class="line">    <span class="keyword">public</span> ImageView imageView ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindBitmap</span>(R2.drawable.bm)<span class="comment">//绑定Bitmap 资源  </span></span><br><span class="line">    <span class="keyword">public</span> Bitmap bitmap ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">  </span><br><span class="line">        imageView.setImageBitmap(bitmap);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br><code>这里的图片资源引用存在一个小问题：drawable文件夹下的图片使用R或R2引用都没问题；但是mipmap文件夹下的图片资源引用目前只能使用R。</code><br>4）@BindColor( ) : 绑定一个颜色值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindView</span>( R2.id.button)  <span class="comment">//绑定一个控件  </span></span><br><span class="line">    <span class="keyword">public</span> Button button;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindColor</span>( R2.color.colorAccent ) <span class="comment">//具体色值在color文件中  </span></span><br><span class="line">    <span class="keyword">int</span> black ;  <span class="comment">//绑定一个颜色值  </span></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">  </span><br><span class="line">        button.setTextColor(  black );  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p><h3 id="6-点击事件绑定"><a href="#6-点击事件绑定" class="headerlink" title="6.点击事件绑定"></a>6.点击事件绑定</h3><blockquote><p>不用声明view，不用setOnClickLisener（）就可以绑定点击事件</p></blockquote><p>1）绑定事件</p><p>@OnClick( ) : 绑定控件点击事件<br>@OnLongClick( ) ： 绑定控件长按事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@OnClick</span>(R2.id.button1 )   <span class="comment">//给 button1 设置一个点击事件  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"is a click"</span>, Toast.LENGTH_SHORT).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@OnLongClick</span>( R2.id.button1 )    <span class="comment">//给 button1 设置一个长按事件  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">showToast2</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"is a long click"</span>, Toast.LENGTH_SHORT).show();  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>2）指定多个id绑定事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//提示：这是可以自动生成的，大家不要什么都手动敲哦  </span></span><br><span class="line">    <span class="meta">@OnClick</span>(&#123;R.id.ll_product_name, R.id.ll_product_lilv, R.id.ll_product_qixian, R.id.ll_product_repayment_methods&#125;)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">(View view)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;  </span><br><span class="line">            <span class="keyword">case</span> R.id.ll_product_name:  </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件1"</span>);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> R.id.ll_product_lilv:  </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件2"</span>);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> R.id.ll_product_qixian:  </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件3"</span>);  </span><br><span class="line">  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> R.id.ll_product_repayment_methods:  </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件4"</span>);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><blockquote><p>下面是错误的写法，多条点击事件不可以用R2的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OnClick</span>(&#123;R2.id.ll_product_name, R2.id.ll_product_lilv, R2.id.ll_product_qixian, R2.id.ll_product_repayment_methods&#125;)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">(View view)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;    </span><br><span class="line">            <span class="keyword">case</span> R2.id.ll_product_name:    </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件1"</span>);    </span><br><span class="line">                <span class="keyword">break</span>;    </span><br><span class="line">            <span class="keyword">case</span> R2.id.ll_product_lilv:    </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件2"</span>);    </span><br><span class="line">                <span class="keyword">break</span>;    </span><br><span class="line">            <span class="keyword">case</span> R2.id.ll_product_qixian:    </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件3"</span>);    </span><br><span class="line">    </span><br><span class="line">                <span class="keyword">break</span>;    </span><br><span class="line">            <span class="keyword">case</span> R2.id.ll_product_repayment_methods:    </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件4"</span>);    </span><br><span class="line">                <span class="keyword">break</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);    </span><br><span class="line">        setContentView(R.layout.activity_butterknife);    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">//绑定activity    </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><br>如果一定要使用R2的写法，可以单一逐次写,下面写法是正确的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OnClick</span>(R2.id.ll_product_name)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked1</span><span class="params">(View view)</span> </span>&#123;    </span><br><span class="line">       System.out.print(<span class="string">"我是点击事件1"</span>);               </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@OnClick</span>(R2.id.ll_product_lilv)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked2</span><span class="params">(View view)</span> </span>&#123;    </span><br><span class="line">       System.out.print(<span class="string">"我是点击事件2"</span>);     </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="meta">@OnClick</span>(R2.id.ll_product_qixian)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked3</span><span class="params">(View view)</span> </span>&#123;    </span><br><span class="line">       System.out.print(<span class="string">"我是点击事件3"</span>);               </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@OnClick</span>(R2.id.ll_product_repayment_methods)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked4</span><span class="params">(View view)</span> </span>&#123;    </span><br><span class="line">       System.out.print(<span class="string">"我是点击事件4"</span>);               </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);    </span><br><span class="line">        setContentView(R.layout.activity_butterknife);    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">//绑定activity    </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><br>3）自定义View使用注解事件<br>Note：不用指定id，直接注解OnClick<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class MyButton extends Button &#123;  </span><br><span class="line">  @OnClick  </span><br><span class="line">  public void onClick() &#123;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="7-绑定监听"><a href="#7-绑定监听" class="headerlink" title="7.绑定监听"></a>7.绑定监听</h3><p>1）Listeners可以自动配置到方法中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(R.id.submit)  </span><br><span class="line">public void submit(View view) &#123;  </span><br><span class="line">  // TODO submit data to server...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2）对监听器方法的所有参数都是可选的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(R.id.submit)  </span><br><span class="line">public void submit() &#123;  </span><br><span class="line">  // TODO submit data to server...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3）定义一个特定类型，它将自动被转换。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(R.id.submit)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(Button button)</span> </span>&#123;<span class="comment">//看参数这里的变化就明白了  </span></span><br><span class="line">      button.setText(<span class="string">"Hello!"</span>);  </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><br>4）在单个绑定中指定多个id，用于公共事件处理。<br>5）自定义视图可以通过不指定ID来绑定到它们自己的监听器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;  </span><br><span class="line">  <span class="meta">@OnClick</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// TODO do something!  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6）Listener中多方法注解<br>方法注解，其对应的监听器有多个回调，可用于绑定到其中任何一个。每个注解都有一个它绑定的默认回调。使用回调参数指定一个替换。</p><p>eg：以Spinner为例<br>原始：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Spinner s=<span class="keyword">new</span> Spinner(<span class="keyword">this</span>);  </span><br><span class="line">       <span class="comment">//原始方法：Spinner 条目选择监听事件 正常写法  </span></span><br><span class="line">       s.setOnItemSelectedListener(<span class="keyword">new</span> AdapterView.OnItemSelectedListener()&#123;  </span><br><span class="line">           <span class="meta">@Override</span>  </span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;  </span><br><span class="line">           &#125;  </span><br><span class="line">           <span class="meta">@Override</span>  </span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; parent)</span> </span>&#123;  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;);  </span><br></pre></td></tr></table></figure><br>注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/*利用注解对Spinner item  作选择监听事件处理方式*/</span>  </span><br><span class="line">    <span class="meta">@OnItemSelected</span>(R.id.my_spiner)<span class="comment">//默认callback为ITEM_SELECTED  </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;  </span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"position: "</span> + position, Toast.LENGTH_SHORT).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    * 注解onNothingSelected，需要在注解参数添加一个callback， </span></span><br><span class="line"><span class="comment">    * 注意的是Spinner中只要有数据,默认都会选中第0个数据,所以想进入到onNothingSelected()方法,就需要把Adapter中的数据都清空 </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">    <span class="meta">@OnItemSelected</span>(value = R.id.my_spiner, callback = OnItemSelected.Callback.NOTHING_SELECTED)  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Nothing"</span>, Toast.LENGTH_SHORT).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">        Spinner s=<span class="keyword">new</span> Spinner(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>7） @OnCheckedChanged监听的使用<br>原方法应是：setOnCheckedChangeListener()</p><p>在使用注解@OnCheckedChanged的时候，出现了CompoundButton这个参数，因为理解有误，传参有误，还出现了无法转换成CompoundButton的bug。正常使用该注解时，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnCheckedChanged</span>(&#123;R.id.XXX&#125;)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCheckedChangeListener</span><span class="params">(CompoundButton view, <span class="keyword">boolean</span> ischanged )</span></span>&#123;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数是CompoundButton是变化的按钮控件事件id，ischanged是指该控件是否被点击改变。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">RadioGroup</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/rg_main"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/white"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/rg_home"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:focusable</span>=<span class="string">"false"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/nav_one"</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/rg_wealth"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:focusable</span>=<span class="string">"false"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/nav_two"</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/rg_account"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:focusable</span>=<span class="string">"false"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/nav_four"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnCheckedChanged</span>(&#123;R.id.rg_home,R.id.rg_wealth,R.id.rg_account&#125;)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCheckedChangeListener</span><span class="params">(CompoundButton view, <span class="keyword">boolean</span> ischanged )</span></span>&#123;  </span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;  </span><br><span class="line">            <span class="keyword">case</span> R.id.rg_home:  </span><br><span class="line">                <span class="keyword">if</span> (ischanged)&#123;<span class="comment">//注意：这里一定要有这个判断，只有按钮被点击了，ischanged状态发生改变，才会执行下面的内容  </span></span><br><span class="line">                    <span class="comment">//这里写你的按钮变化状态的UI及相关逻辑  </span></span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> R.id.rg_wealth:  </span><br><span class="line">                <span class="keyword">if</span> (ischanged) &#123;  </span><br><span class="line">                    <span class="comment">//这里写你的按钮变化状态的UI及相关逻辑  </span></span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> R.id.rg_account:  </span><br><span class="line">                <span class="keyword">if</span> (ischanged) &#123;  </span><br><span class="line">                    <span class="comment">//这里写你的按钮变化状态的UI及相关逻辑  </span></span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">default</span>:  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><p>8）使用findById<br>Butter Knife仍然包含了findById()方法，用于仍需从一个view ，Activity，或者Dialog上初始化view的时候，并且它可以自动转换类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, <span class="keyword">null</span>);  </span><br><span class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);  </span><br><span class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);  </span><br><span class="line">ImageView iv = ButterKnife.findById(view, R.id.iv); </span><br></pre></td></tr></table></figure><p>9）设置多个view的属性<br>apply()</p><p>作用：允许您立即对列表中的所有视图进行操作。</p><p>Action和Setter接口</p><p>作用：Action和Setter接口允许指定简单的行为。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindViews</span>(&#123;R2.id.first_name, R2.id.middle_name, R2.id.last_name&#125;)  </span><br><span class="line">    List&lt;EditText&gt; nameViews;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);  </span><br><span class="line">        <span class="comment">//看不懂的小伙伴，多敲几遍代码，实际操作一下自然就懂了。相信我！如果你重复敲了10遍以上的代码，并认真思考了还没懂，欢迎给我评论留言。  </span></span><br><span class="line">          </span><br><span class="line">        <span class="comment">//设置多个view的属性  </span></span><br><span class="line">        <span class="comment">//方式1：传递值  </span></span><br><span class="line">        ButterKnife.apply(nameViews, DISABLE);  </span><br><span class="line">        <span class="comment">//方式2：指定值  </span></span><br><span class="line">        ButterKnife.apply(nameViews, ENABLED, <span class="keyword">false</span>);  </span><br><span class="line">        <span class="comment">////方式3 设置View的Property  </span></span><br><span class="line">        ButterKnife.apply(nameViews, View.ALPHA, <span class="number">0.0f</span>);<span class="comment">//一个Android属性也可以用于应用的方法。  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    * Action接口设置属性 </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Action&lt;View&gt; DISABLE = <span class="keyword">new</span> ButterKnife.Action&lt;View&gt;() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(View view, <span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">            view.setEnabled(<span class="keyword">false</span>);<span class="comment">//目的是使多个view都具备此属性  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    * Setter接口设置属性 </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Setter&lt;View, Boolean&gt; ENABLED = <span class="keyword">new</span> ButterKnife.Setter&lt;View, Boolean&gt;() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(View view, Boolean value, <span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">            view.setEnabled(value);<span class="comment">//目的是使多个view都具备此属性，可变boolean值是可以传递的  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><h2 id="Butter-Knife的代码混淆"><a href="#Butter-Knife的代码混淆" class="headerlink" title="Butter Knife的代码混淆"></a>Butter Knife的代码混淆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-keep class butterknife.** &#123; *; &#125;  </span><br><span class="line">-dontwarn butterknife.internal.**  </span><br><span class="line">-keep class **$$ViewBinder &#123; *; &#125;  </span><br><span class="line">  </span><br><span class="line">-keepclasseswithmembernames class * &#123;  </span><br><span class="line">    @butterknife.* &lt;fields&gt;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">-keepclasseswithmembernames class * &#123;  </span><br><span class="line">    @butterknife.* &lt;methods&gt;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kotlin语法</title>
      <link href="/2018/05/23/Kotlin%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/05/23/Kotlin%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Kotlin语法学习<br><a id="more"></a></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>Kotlin声明变量与Java声明变量有些不一样，Java变量类型在前，变量名在后，而Kotlin则相反，变量名在前，变量类型在后，中间加:(冒号)，并且Kotlin可以自动判断变量的类型。</code></p><h3 id="声明局部常量"><a href="#声明局部常量" class="headerlink" title="声明局部常量"></a>声明局部常量</h3><p>（常量使用<code>val</code>关键字）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val a: Int = 1</span><br><span class="line">val b = 1   // 自动判断出Int类型</span><br><span class="line">val c: Int  // 当没有初始化值的时候要声明类型，全局常量不能这样写</span><br><span class="line">c = 1       // 赋值</span><br><span class="line"></span><br><span class="line">//作为全局常量时需要指定值</span><br><span class="line">val b : Int = 0</span><br><span class="line">val b = 0</span><br></pre></td></tr></table></figure></p><p>声明变量（变量使用<code>var</code>关键字）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x = 5 // 自动推断出Int类型</span><br><span class="line">x += 1</span><br></pre></td></tr></table></figure></p><h3 id="函数定义："><a href="#函数定义：" class="headerlink" title="函数定义："></a>函数定义：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">等同于java中的：</span></span><br><span class="line"><span class="comment">private int getResult(int a, int b) &#123;</span></span><br><span class="line"><span class="comment">        return a + b;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">fun <span class="title">getResult</span><span class="params">(a: Int, b: Int)</span>: Int </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的函数没有写返回值，Kotlin会自动判断返回值类型</span></span><br><span class="line"><span class="comment">//如果一个函数只有一个并且是表达式函数体并且是返回类型自动推断的话，可以直接这样写</span></span><br><span class="line"><span class="function">fun <span class="title">getResult1</span><span class="params">(a: Int, b: Int)</span> </span>= a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回无定义类型 Unit，或省略不写</span></span><br><span class="line"><span class="function">fun <span class="title">getResult2</span><span class="params">(a: Int, b: Int)</span>: Unit </span>&#123;</span><br><span class="line">    print(a + b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>使用<code>${变量}</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    var x = <span class="string">"2"</span></span><br><span class="line">    var s = arrayOf(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>)</span><br><span class="line">    println(<span class="string">"x:$&#123;x&#125;   s1:$&#123;s[0]&#125;  s2:"</span>+s[<span class="number">1</span>])    <span class="comment">//可以用`$&#123;变量&#125;`符号取值或在引号外面直接读</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">max</span><span class="params">(a: Int, b: Int)</span> </span>= <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">等同</span></span><br><span class="line"><span class="comment">fun max(a: Int, b: Int): Int &#123;</span></span><br><span class="line"><span class="comment">    if (a &gt; b) &#123;</span></span><br><span class="line"><span class="comment">        return a</span></span><br><span class="line"><span class="comment">    &#125; else &#123;</span></span><br><span class="line"><span class="comment">        return b</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="使用可空变量和空置检查"><a href="#使用可空变量和空置检查" class="headerlink" title="使用可空变量和空置检查"></a>使用可空变量和空置检查</h3><p><code>当一个变量、函数可能出现空值的时候，应该指出该引用可空</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">getResult4</span><span class="params">(a: Int, b: Int)</span>: Int ? </span>&#123; <span class="comment">// 设置函数返回类型可空</span></span><br><span class="line">    print(a + b)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><p><code>is</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">getResult5</span><span class="params">(obj:Any)</span>:Int ?</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj is String)&#123;          <span class="comment">// `obj`在这个分支中自动转换为`String`类型</span></span><br><span class="line">        <span class="keyword">return</span> obj.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>                  <span class="comment">// `obj`仍然是`Any`类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">getResult6</span><span class="params">(x : Array&lt;String&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (a in x)&#123;       <span class="comment">// in操作符可以判断是否arg是否在args里面</span></span><br><span class="line">        println(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i in x.indices)    <span class="comment">//获取x范围循环</span></span><br><span class="line">        println(x[i])</span><br><span class="line">    var j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (j in x.indices)&#123;</span><br><span class="line">        print(x[j++])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="when表达式"><a href="#when表达式" class="headerlink" title="when表达式"></a>when表达式</h3><p><code>when表达式就相当于Java的switch表达式，省去了case和break，并且支持各种类型</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">cases</span><span class="params">(obj: Any)</span> </span>&#123;</span><br><span class="line">    when (obj) &#123;</span><br><span class="line">        <span class="number">1</span>          -&gt; print(<span class="string">"One"</span>) <span class="comment">//如果obj的值为1</span></span><br><span class="line">        <span class="string">"Hello"</span>    -&gt; print(<span class="string">"Greeting"</span>) <span class="comment">// 如果obj的值为hello</span></span><br><span class="line">        is Long    -&gt; print(<span class="string">"Long"</span>) <span class="comment">// 如果obj的类型是Long类型</span></span><br><span class="line">        !is String -&gt; print(<span class="string">"Not a string"</span>) <span class="comment">// 如果obj的类型不属于String类型</span></span><br><span class="line">        <span class="keyword">else</span>       -&gt; print(<span class="string">"Unknown"</span>) <span class="comment">// 默认，相当于switch的default</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="range范围"><a href="#range范围" class="headerlink" title="range范围"></a>range范围</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x in <span class="number">1</span>..y-<span class="number">1</span>) &#123; <span class="comment">//1..y-1表示1到y-1的范围</span></span><br><span class="line">    print(<span class="string">"OK"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span>..<span class="number">100</span>) &#123; ... &#125;  <span class="comment">//  1到100范围</span></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span> until <span class="number">100</span>) &#123; ... &#125; <span class="comment">// 半开范围，不包括100，相当于[1,100)</span></span><br><span class="line"><span class="keyword">for</span> (x in <span class="number">2</span>..<span class="number">10</span> step <span class="number">2</span>) &#123; ... &#125; <span class="comment">// 每次夸2，内容为2,4,6,8,10</span></span><br><span class="line"><span class="keyword">for</span> (x in <span class="number">10</span> downTo <span class="number">1</span>) &#123; ... &#125; <span class="comment">// 返序</span></span><br><span class="line"><span class="keyword">if</span> (x in <span class="number">1</span>..<span class="number">10</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="Getter和Setter"><a href="#Getter和Setter" class="headerlink" title="Getter和Setter"></a>Getter和Setter</h3><p><code>声明属性的完整语法如下，语法中的初始化语句，getter和setter都是可选的</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var &lt;propertyName&gt;: &lt;PropertyType&gt; [= &lt;property_initializer&gt;]</span><br><span class="line">    [&lt;getter&gt;]</span><br><span class="line">    [&lt;setter&gt;]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var allByDefault: Int? // 错误: 需要一个初始化语句, 默认实现了 getter 和 setter 方法</span><br><span class="line">var initialized = 1 // 类型为 Int, 默认实现了 getter 和 setter</span><br><span class="line">val simple: Int? // 类型为 Int ，默认实现 getter ，但必须在构造函数中初始化</span><br><span class="line">val inferredType = 1 // 类型为 Int 类型,默认实现 getter</span><br><span class="line">//val不允许设置setter函数，因为它是只读的</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    var size = <span class="number">0</span></span><br><span class="line">    var name : String ? = <span class="keyword">null</span></span><br><span class="line">        get() = field              <span class="comment">//使用field来起到局部变量的作用,field标识符只允许在属性的访问器函数内使用</span></span><br><span class="line">        set(value)&#123;</span><br><span class="line">            field = value +<span class="string">"s"</span></span><br><span class="line">            println(value)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译时常量"><a href="#编译时常量" class="headerlink" title="编译时常量"></a>编译时常量</h3><p>使用const修饰符标记为编译时常量. 这种属性需要同时满足以下条件: </p><ul><li>顶层或对象的成员(Top-level or member of an object)</li><li>以String或基本类型进行初始化</li><li>没有自定义getter<br>这种属性可以当作注解使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> val SUBSYSTEM_DEPRECATED: String = <span class="string">"This subsystem is deprecated"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprected</span>(SUBSYSTEM_DEPRECATED) </span><br><span class="line"><span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="延迟初始化属性"><a href="#延迟初始化属性" class="headerlink" title="延迟初始化属性"></a>延迟初始化属性</h3><p><code>在Kotlin中，声明为具有非空类型的属性必须在构造函数中初始化，但是往往不希望在构造函数中初始化，例如在通过依赖注入或单元测试的设置方法来初始化属性的时候，不能在构造器中提供一个非空的初始化语句，为了处理这种情况，就要在属性上加lateinit关键字来延迟初始化</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    lateinit var subject: TestSubject</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SetUp</span> <span class="function">fun <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        subject = TestSubject()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="function">fun <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        subject.method() </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>lateinit只能够在var类型的属性中，不能用于构造函数，而且属性不能有自定义的getter和setting，这些属性必须是非空类型，并且不能是基本类型。</code></p><p><code>如果在一个延迟初始化的属性初始化前调用,会导致一个特定异常,调用的时候值还没有初始化.</code></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
