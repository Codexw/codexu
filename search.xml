<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ButterKnife</title>
      <link href="/2018/05/23/ButterKnife/"/>
      <url>/2018/05/23/ButterKnife/</url>
      <content type="html"><![CDATA[<p>ButterKnife 8.1<br><a id="more"></a></p><p>项目地址：<a href="https://github.com/JakeWharton/butterknife">https://github.com/JakeWharton/butterknife</a><br>AS插件：Android Butterknife Zelezny</p><p>#一、优点<br>1） 强大的View绑定和Click事件处理功能，简化代码，提升开发效率 </p><p>2）方便的处理Adaper里的ViewHolder绑定问题 </p><p>3） 运行时不会影响app效率，使用配置方便 </p><p>4）代码清晰，可读性强</p><p>###二、添加依赖<br>在module的build.gradle 文件中的dependencies标签中添加代码如下（导入库的依赖）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;  </span><br><span class="line">  compile &apos;com.jakewharton:butterknife:8.8.1&apos;  </span><br><span class="line">  annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.8.1&apos;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在module的build.gradle 文件中设置支持插件 ，添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.library&apos;  </span><br><span class="line">apply plugin: &apos;com.jakewharton.butterknife&apos;</span><br></pre></td></tr></table></figure></p><p><code>（注：这条是开发者给出的配置，目前不加此配置也是不影响正常使用的，但小区别还是有的（eg：R2.id.XXX能否正常使用），是否作此配置看使用者自己吧，本人建议加此配置。）</code></p><p>#三、Butter Knife的注册</p><p>#####1.使用注意事项</p><ol><li><p>在Activity 类中绑定 ：ButterKnife.bind(this);必须在setContentView();之后绑定；且父类bind绑定后，子类不需要再bind。</p></li><li><p>在非Activity 类（eg：Fragment、ViewHold）中绑定：ButterKnife.bind(this，view);</p></li></ol><p>这里的this不能替换成getActivity（）。</p><ol start="3"><li><p>在Activity中不需要做解绑操作，在Fragment 中必须在onDestroyView()中做解绑操作。</p></li><li><p>使用ButterKnife修饰的方法和控件，不能用private or static 修饰，否则会报错。</p></li><li><p>setContentView()不能通过注解实现。（其他的有些注解框架可以）</p></li><li><p>使用Activity为根视图绑定任意对象时，如果你使用类似MVC的设计模式你可以在Activity 调用ButterKnife.bind(this, activity)，来绑定Controller。</p></li><li><p>使用ButterKnife.bind(this，view)绑定一个view的子节点字段。如果你在子View的布局里或者自定义view的构造方法里 使用了inflate,你可以立刻调用此方法。或者，从XML inflate来的自定义view类型可以在onFinishInflate回调方法中使用它。</p></li></ol><p>#####2.在Activity中绑定ButterKnife<br>使用：ButterKnife.bind(this);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity&#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">        //绑定初始化ButterKnife  </span><br><span class="line">        ButterKnife.bind(this);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#####3.在Fragment中绑定ButterKnife<br>使用：ButterKnife.bind(this, view);</p><p>Fragment的生命周期不同于activity。在onCreateView中绑定一个Fragment时，在onDestroyView中将视图设置为null。</p><p>当你调用bind来为你绑定一个Fragment时,Butter Knife会返回一个Unbinder的实例。</p><p>在适当的生命周期（onDestroyView）回调中调用它的unbind方法进行Fragment解绑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeFragment extends Fragment&#123;  </span><br><span class="line">    private Unbinder unbinder;  </span><br><span class="line">    @Override  </span><br><span class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,  </span><br><span class="line">                             Bundle savedInstanceState) &#123;  </span><br><span class="line">        View view = inflater.inflate(R.layout.fragment, container, false);  </span><br><span class="line">        //返回一个Unbinder值（进行解绑），注意这里的this不能使用getActivity()  </span><br><span class="line">        unbinder = ButterKnife.bind(this, view);  </span><br><span class="line">        return view;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /** </span><br><span class="line">     * onDestroyView中进行解绑操作 </span><br><span class="line">     */  </span><br><span class="line">    @Override  </span><br><span class="line">    public void onDestroyView() &#123;  </span><br><span class="line">        super.onDestroyView();  </span><br><span class="line">        unbinder.unbind();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#####4.在Adapter中绑定ButterKnife<br>使用：ButterKnife.bind(this, view);</p><p>在Adapter的ViewHolder中使用，将ViewHolder加一个构造方法，在new ViewHolder的时候把view传递进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class MyAdapter extends BaseAdapter &#123;  </span><br><span class="line">    // 部分代码省略...  </span><br><span class="line">  </span><br><span class="line">  @Override   </span><br><span class="line">  public View getView(int position, View view, ViewGroup parent) &#123;  </span><br><span class="line">    ViewHolder holder;  </span><br><span class="line">    if (view != null) &#123;  </span><br><span class="line">      holder = (ViewHolder) view.getTag();  </span><br><span class="line">    &#125; else &#123;  </span><br><span class="line">      view = inflater.inflate(R.layout.testlayout, parent, false);  </span><br><span class="line">      holder = new ViewHolder(view);  </span><br><span class="line">      view.setTag(holder);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    holder.name.setText(&quot;诺诺&quot;);  </span><br><span class="line">    // etc...  </span><br><span class="line">  </span><br><span class="line">    return view;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  static class ViewHolder &#123;  </span><br><span class="line">    @BindView(R.id.title) TextView name;  </span><br><span class="line">    @BindView(R.id.job_title) TextView jobTitle;  </span><br><span class="line">  </span><br><span class="line">    public ViewHolder(View view) &#123;  </span><br><span class="line">      ButterKnife.bind(this, view);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#四、Butter Knife的使用</p><p>#####1.使用注意事项<br>1）ButterKinfe的注解标签因版本不同而有所变化。8.0.0之前的Bind标签在8.0.0之后变成了BindView，</p><p>而8.7.0之后在绑定view时，要用R2.id.XXX，而不再是常用的R.id.XXX。</p><p>Note：我在实际使用时用R.id.XXX和R2.id.XXX都可以，目前本人并未发现有什么异常。自动生成代码时是R.id.XXX；建议使用R2.id.XXX。因为网上都说使用R2是因为library中的R字段的id值不是final类型的，但是你的应用module中确是final类型的……</p><p>2）默认情况下，@bind和 listener 的绑定是必需的。如果无法找到目标视图，将抛出一个异常。<br>要抑制此行为并创建可选绑定，可以将@Nullable注解添加到字段中，或将@Optional注解添加到方法。</p><p>Note:任何被命名为@Nullable的注解都可以用于成员变量。鼓励使用Android的”support-annotations”库中的@Nullable注解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Nullable  </span><br><span class="line">@BindView(R.id.might_not_be_there)   </span><br><span class="line">TextView mightNotBeThere;  </span><br><span class="line">  </span><br><span class="line">@Optional  </span><br><span class="line">@OnClick(R.id.maybe_missing)   </span><br><span class="line">public void onMaybeMissingClicked() &#123;  </span><br><span class="line">    // TODO ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#####2.绑定注解<br>@BindView—-&gt;绑定一个view；id为一个view 变量</p><p>@BindViews  —-&gt;<br> 绑定多个view；id为一个view的list变量</p><p>@BindArray—-&gt;<br> 绑定string里面array数组；@BindArray(R.array.city ) String[] citys ;</p><p>@BindBitmap—-&gt;绑定图片资源为Bitmap；@BindBitmap(<br> R.mipmap.wifi ) Bitmap bitmap;</p><p>@BindBool —-&gt;绑定boolean值</p><p>@BindColor —-&gt;绑定color；@BindColor(R.color.colorAccent)<br> int black;</p><p>@BindDimen —-&gt;绑定Dimen；@BindDimen(R.dimen.borth_width)<br> int mBorderWidth;</p><p>@BindDrawable<br>—-&gt; 绑定Drawable；@BindDrawable(R.drawable.test_pic) Drawable mTestPic;</p><p>@BindFloat —-&gt;绑定float</p><p>@BindInt —-&gt;绑定int</p><p>@BindString —-&gt;绑定一个String id为一个String变量；@BindString(<br> R.string.app_name ) String meg;</p><p>#####3.事件注解<br>(注：此处作个统计，后面会有详细解释)</p><p>@OnClick—-&gt;点击事件<br>@OnCheckedChanged —-&gt;选中，取消选中<br>@OnEditorAction —-&gt;软键盘的功能键<br>@OnFocusChange —-&gt;焦点改变<br>@OnItemClick item—-&gt;被点击(注意这里有坑，如果item里面有Button等这些有点击的控件事件的，需要设置这些控件属性focusable为false)<br>@OnItemLongClick item—-&gt;长按(返回真可以拦截onItemClick)<br>@OnItemSelected —-&gt;item被选择事件<br>@OnLongClick —-&gt;长按事件<br>@OnPageChange —-&gt;页面改变事件<br>@OnTextChanged —-&gt;EditText里面的文本变化事件<br>@OnTouch —-&gt;触摸事件<br>@Optional —-&gt;</p><p>选择性注入，如果当前对象不存在，就会抛出一个异常，为了压制这个异常，可以在变量或者方法上加入一下注解,让注入变成选择性的,如果目标View存在,则注入, 不存在,则什么事情都不做=如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Optional  </span><br><span class="line">@OnCheckedChanged(R.id.cb_test)  </span><br><span class="line">public void onCheckedChanged(CompoundButton buttonView,boolean isChecked)&#123;  </span><br><span class="line">    if(isChecked)&#123;  </span><br><span class="line">        tvTest.setText(&quot;被选中...&quot;);  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        tvTest.setText(&quot;被取消...&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#####4.绑定view</p><p>1）@BindView() : 布局id 注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@BindView( R2.id.button)  </span><br><span class="line">public Button button;</span><br></pre></td></tr></table></figure><p>2）@BindViews(): 布局内多个控件 id 注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;  </span><br><span class="line">  </span><br><span class="line">    @BindViews(&#123; R2.id.button1, R2.id.button2,  R2.id.button3&#125;)  </span><br><span class="line">    public List&lt;Button&gt; buttonList ;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">  </span><br><span class="line">        ButterKnife.bind(this);  </span><br><span class="line">  </span><br><span class="line">        buttonList.get( 0 ).setText( &quot;hello 1 &quot;);  </span><br><span class="line">        buttonList.get( 1 ).setText( &quot;hello 2 &quot;);  </span><br><span class="line">        buttonList.get( 2 ).setText( &quot;hello 3 &quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#####5.绑定资源<br>1）@BindString() ：绑定string 字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeActivity extends AppCompatActivity &#123;  </span><br><span class="line">  </span><br><span class="line">    @BindView(R2.id.button) //绑定button 控件  </span><br><span class="line">    public Button button ;  </span><br><span class="line">  </span><br><span class="line">    @BindString(R2.string.app_name)  //绑定资源文件中string字符串  </span><br><span class="line">    String str;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">        //绑定activity  </span><br><span class="line">        ButterKnife.bind( this ) ;  </span><br><span class="line">        button.setText( str );  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2）@BindArray() : 绑定string里面array数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;  </span><br><span class="line">    &lt;string name=&quot;app_name&quot;&gt;城市&lt;/string&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;string-array name=&quot;city&quot;&gt;  </span><br><span class="line">        &lt;item&gt;北京市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;天津市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;哈尔滨市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;大连市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;香港市&lt;/item&gt;  </span><br><span class="line">    &lt;/string-array&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeActivity extends AppCompatActivity &#123;  </span><br><span class="line">  </span><br><span class="line">    @BindView(R2.id.button) //绑定button 控件  </span><br><span class="line">    public Button button ;  </span><br><span class="line">  </span><br><span class="line">    @BindString(R2.string.app_name)  //绑定资源文件中string字符串  </span><br><span class="line">    String str;  </span><br><span class="line">  </span><br><span class="line">    @BindArray(R2.array.city)  //绑定string里面array数组  </span><br><span class="line">    String [] citys ;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">        //绑定activity  </span><br><span class="line">        ButterKnife.bind( this ) ;  </span><br><span class="line">        button.setText(citys[0]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）@BindBitmap( ) : 绑定Bitmap 资源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeActivity extends AppCompatActivity &#123;  </span><br><span class="line">  </span><br><span class="line">    @BindView( R2.id.imageView ) //绑定ImageView 控件  </span><br><span class="line">    public ImageView imageView ;  </span><br><span class="line">  </span><br><span class="line">    @BindBitmap(R2.drawable.bm)//绑定Bitmap 资源  </span><br><span class="line">    public Bitmap bitmap ;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        //绑定activity  </span><br><span class="line">        ButterKnife.bind( this ) ;  </span><br><span class="line">  </span><br><span class="line">        imageView.setImageBitmap(bitmap);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>这里的图片资源引用存在一个小问题：drawable文件夹下的图片使用R或R2引用都没问题；但是mipmap文件夹下的图片资源引用目前只能使用R。</code><br>4）@BindColor( ) : 绑定一个颜色值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeActivity extends AppCompatActivity &#123;  </span><br><span class="line">  </span><br><span class="line">    @BindView( R2.id.button)  //绑定一个控件  </span><br><span class="line">    public Button button;  </span><br><span class="line">  </span><br><span class="line">    @BindColor( R2.color.colorAccent ) //具体色值在color文件中  </span><br><span class="line">    int black ;  //绑定一个颜色值  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        //绑定activity  </span><br><span class="line">        ButterKnife.bind( this ) ;  </span><br><span class="line">  </span><br><span class="line">        button.setTextColor(  black );  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-点击事件绑定"><a href="#7-点击事件绑定" class="headerlink" title="7.点击事件绑定"></a>7.点击事件绑定</h3><blockquote><p>不用声明view，不用setOnClickLisener（）就可以绑定点击事件</p></blockquote><p>1）绑定事件</p><p>@OnClick( ) : 绑定控件点击事件<br>@OnLongClick( ) ： 绑定控件长按事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeActivity extends AppCompatActivity &#123;  </span><br><span class="line">  </span><br><span class="line">    @OnClick(R2.id.button1 )   //给 button1 设置一个点击事件  </span><br><span class="line">    public void showToast()&#123;  </span><br><span class="line">        Toast.makeText(this, &quot;is a click&quot;, Toast.LENGTH_SHORT).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @OnLongClick( R2.id.button1 )    //给 button1 设置一个长按事件  </span><br><span class="line">    public boolean showToast2()&#123;  </span><br><span class="line">        Toast.makeText(this, &quot;is a long click&quot;, Toast.LENGTH_SHORT).show();  </span><br><span class="line">        return true ;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        //绑定activity  </span><br><span class="line">        ButterKnife.bind( this ) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2）指定多个id绑定事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeActivity extends AppCompatActivity &#123;  </span><br><span class="line">  </span><br><span class="line">    //提示：这是可以自动生成的，大家不要什么都手动敲哦  </span><br><span class="line">    @OnClick(&#123;R.id.ll_product_name, R.id.ll_product_lilv, R.id.ll_product_qixian, R.id.ll_product_repayment_methods&#125;)  </span><br><span class="line">    public void onViewClicked(View view) &#123;  </span><br><span class="line">        switch (view.getId()) &#123;  </span><br><span class="line">            case R.id.ll_product_name:  </span><br><span class="line">                System.out.print(&quot;我是点击事件1&quot;);  </span><br><span class="line">                break;  </span><br><span class="line">            case R.id.ll_product_lilv:  </span><br><span class="line">                System.out.print(&quot;我是点击事件2&quot;);  </span><br><span class="line">                break;  </span><br><span class="line">            case R.id.ll_product_qixian:  </span><br><span class="line">                System.out.print(&quot;我是点击事件3&quot;);  </span><br><span class="line">  </span><br><span class="line">                break;  </span><br><span class="line">            case R.id.ll_product_repayment_methods:  </span><br><span class="line">                System.out.print(&quot;我是点击事件4&quot;);  </span><br><span class="line">                break;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        //绑定activity  </span><br><span class="line">        ButterKnife.bind( this ) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>下面是错误的写法，多条点击事件不可以用R2的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeActivity extends AppCompatActivity &#123;    </span><br><span class="line">    </span><br><span class="line">    @OnClick(&#123;R2.id.ll_product_name, R2.id.ll_product_lilv, R2.id.ll_product_qixian, R2.id.ll_product_repayment_methods&#125;)    </span><br><span class="line">    public void onViewClicked(View view) &#123;    </span><br><span class="line">        switch (view.getId()) &#123;    </span><br><span class="line">            case R2.id.ll_product_name:    </span><br><span class="line">                System.out.print(&quot;我是点击事件1&quot;);    </span><br><span class="line">                break;    </span><br><span class="line">            case R2.id.ll_product_lilv:    </span><br><span class="line">                System.out.print(&quot;我是点击事件2&quot;);    </span><br><span class="line">                break;    </span><br><span class="line">            case R2.id.ll_product_qixian:    </span><br><span class="line">                System.out.print(&quot;我是点击事件3&quot;);    </span><br><span class="line">    </span><br><span class="line">                break;    </span><br><span class="line">            case R2.id.ll_product_repayment_methods:    </span><br><span class="line">                System.out.print(&quot;我是点击事件4&quot;);    </span><br><span class="line">                break;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    @Override    </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;    </span><br><span class="line">        super.onCreate(savedInstanceState);    </span><br><span class="line">        setContentView(R.layout.activity_butterknife);    </span><br><span class="line">    </span><br><span class="line">        //绑定activity    </span><br><span class="line">        ButterKnife.bind( this ) ;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>如果一定要使用R2的写法，可以单一逐次写,下面写法是正确的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeActivity extends AppCompatActivity &#123;    </span><br><span class="line">    </span><br><span class="line">    @OnClick(R2.id.ll_product_name)    </span><br><span class="line">    public void onViewClicked1(View view) &#123;    </span><br><span class="line">       System.out.print(&quot;我是点击事件1&quot;);               </span><br><span class="line">    &#125;    </span><br><span class="line">    @OnClick(R2.id.ll_product_lilv)    </span><br><span class="line">    public void onViewClicked2(View view) &#123;    </span><br><span class="line">       System.out.print(&quot;我是点击事件2&quot;);     </span><br><span class="line">    &#125;   </span><br><span class="line">    @OnClick(R2.id.ll_product_qixian)    </span><br><span class="line">    public void onViewClicked3(View view) &#123;    </span><br><span class="line">       System.out.print(&quot;我是点击事件3&quot;);               </span><br><span class="line">    &#125;    </span><br><span class="line">    @OnClick(R2.id.ll_product_repayment_methods)    </span><br><span class="line">    public void onViewClicked4(View view) &#123;    </span><br><span class="line">       System.out.print(&quot;我是点击事件4&quot;);               </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    @Override    </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;    </span><br><span class="line">        super.onCreate(savedInstanceState);    </span><br><span class="line">        setContentView(R.layout.activity_butterknife);    </span><br><span class="line">    </span><br><span class="line">        //绑定activity    </span><br><span class="line">        ButterKnife.bind( this ) ;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>3）自定义View使用注解事件<br>Note：不用指定id，直接注解OnClick<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class MyButton extends Button &#123;  </span><br><span class="line">  @OnClick  </span><br><span class="line">  public void onClick() &#123;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#####7.绑定监听<br>1）Listeners可以自动配置到方法中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(R.id.submit)  </span><br><span class="line">public void submit(View view) &#123;  </span><br><span class="line">  // TODO submit data to server...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2）对监听器方法的所有参数都是可选的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(R.id.submit)  </span><br><span class="line">public void submit() &#123;  </span><br><span class="line">  // TODO submit data to server...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3）定义一个特定类型，它将自动被转换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(R.id.submit)  </span><br><span class="line">    public void sayHi(Button button) &#123;//看参数这里的变化就明白了  </span><br><span class="line">      button.setText(&quot;Hello!&quot;);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>4）在单个绑定中指定多个id，用于公共事件处理。<br>5）自定义视图可以通过不指定ID来绑定到它们自己的监听器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class FancyButton extends Button &#123;  </span><br><span class="line">  @OnClick  </span><br><span class="line">  public void onClick() &#123;  </span><br><span class="line">    // TODO do something!  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6）Listener中多方法注解<br>方法注解，其对应的监听器有多个回调，可用于绑定到其中任何一个。每个注解都有一个它绑定的默认回调。使用回调参数指定一个替换。</p><p>eg：以Spinner为例<br>原始：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Spinner s=new Spinner(this);  </span><br><span class="line">       //原始方法：Spinner 条目选择监听事件 正常写法  </span><br><span class="line">       s.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()&#123;  </span><br><span class="line">           @Override  </span><br><span class="line">           public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;  </span><br><span class="line">           &#125;  </span><br><span class="line">           @Override  </span><br><span class="line">           public void onNothingSelected(AdapterView&lt;?&gt; parent) &#123;  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></p><p>注解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeActivity extends AppCompatActivity &#123;  </span><br><span class="line">    /*利用注解对Spinner item  作选择监听事件处理方式*/  </span><br><span class="line">    @OnItemSelected(R.id.my_spiner)//默认callback为ITEM_SELECTED  </span><br><span class="line">    void onItemSelected(int position) &#123;  </span><br><span class="line">        Toast.makeText(this, &quot;position: &quot; + position, Toast.LENGTH_SHORT).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">    /* </span><br><span class="line">    * 注解onNothingSelected，需要在注解参数添加一个callback， </span><br><span class="line">    * 注意的是Spinner中只要有数据,默认都会选中第0个数据,所以想进入到onNothingSelected()方法,就需要把Adapter中的数据都清空 </span><br><span class="line">    */  </span><br><span class="line">    @OnItemSelected(value = R.id.my_spiner, callback = OnItemSelected.Callback.NOTHING_SELECTED)  </span><br><span class="line">    void onNothingSelected() &#123;  </span><br><span class="line">        Toast.makeText(this, &quot;Nothing&quot;, Toast.LENGTH_SHORT).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        //绑定activity  </span><br><span class="line">        ButterKnife.bind( this ) ;  </span><br><span class="line">        Spinner s=new Spinner(this);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7） @OnCheckedChanged监听的使用<br>原方法应是：setOnCheckedChangeListener()</p><p>在使用注解@OnCheckedChanged的时候，出现了CompoundButton这个参数，因为理解有误，传参有误，还出现了无法转换成CompoundButton的bug。正常使用该注解时，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnCheckedChanged(&#123;R.id.XXX&#125;)  </span><br><span class="line">public void OnCheckedChangeListener(CompoundButton view, boolean ischanged )&#123;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参数是CompoundButton是变化的按钮控件事件id，ischanged是指该控件是否被点击改变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  </span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;  </span><br><span class="line">    android:layout_width=&quot;match_parent&quot;  </span><br><span class="line">    android:layout_height=&quot;match_parent&quot;  </span><br><span class="line">    android:orientation=&quot;vertical&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;RadioGroup  </span><br><span class="line">        android:id=&quot;@+id/rg_main&quot;  </span><br><span class="line">        android:layout_width=&quot;fill_parent&quot;  </span><br><span class="line">        android:layout_height=&quot;48dp&quot;  </span><br><span class="line">        android:layout_alignParentBottom=&quot;true&quot;  </span><br><span class="line">        android:background=&quot;@color/white&quot;  </span><br><span class="line">        android:orientation=&quot;horizontal&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;RadioButton  </span><br><span class="line">            android:id=&quot;@+id/rg_home&quot;  </span><br><span class="line">            android:layout_width=&quot;match_parent&quot;  </span><br><span class="line">            android:layout_height=&quot;match_parent&quot;  </span><br><span class="line">            android:focusable=&quot;false&quot;  </span><br><span class="line">            android:text=&quot;@string/nav_one&quot; /&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;RadioButton  </span><br><span class="line">            android:id=&quot;@+id/rg_wealth&quot;  </span><br><span class="line">            android:layout_width=&quot;match_parent&quot;  </span><br><span class="line">            android:layout_height=&quot;match_parent&quot;  </span><br><span class="line">            android:focusable=&quot;false&quot;  </span><br><span class="line">            android:text=&quot;@string/nav_two&quot; /&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;RadioButton  </span><br><span class="line">            android:id=&quot;@+id/rg_account&quot;  </span><br><span class="line">            android:layout_width=&quot;match_parent&quot;  </span><br><span class="line">            android:layout_height=&quot;match_parent&quot;  </span><br><span class="line">            android:focusable=&quot;false&quot;  </span><br><span class="line">            android:text=&quot;@string/nav_four&quot; /&gt;  </span><br><span class="line">    &lt;/RadioGroup&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@OnCheckedChanged(&#123;R.id.rg_home,R.id.rg_wealth,R.id.rg_account&#125;)  </span><br><span class="line">    public void OnCheckedChangeListener(CompoundButton view, boolean ischanged )&#123;  </span><br><span class="line">        switch (view.getId()) &#123;  </span><br><span class="line">            case R.id.rg_home:  </span><br><span class="line">                if (ischanged)&#123;//注意：这里一定要有这个判断，只有按钮被点击了，ischanged状态发生改变，才会执行下面的内容  </span><br><span class="line">                    //这里写你的按钮变化状态的UI及相关逻辑  </span><br><span class="line">                &#125;  </span><br><span class="line">                break;  </span><br><span class="line">            case R.id.rg_wealth:  </span><br><span class="line">                if (ischanged) &#123;  </span><br><span class="line">                    //这里写你的按钮变化状态的UI及相关逻辑  </span><br><span class="line">                &#125;  </span><br><span class="line">                break;  </span><br><span class="line">            case R.id.rg_account:  </span><br><span class="line">                if (ischanged) &#123;  </span><br><span class="line">                    //这里写你的按钮变化状态的UI及相关逻辑  </span><br><span class="line">                &#125;  </span><br><span class="line">                break;  </span><br><span class="line">            default:  </span><br><span class="line">                break;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>8）使用findById<br>Butter Knife仍然包含了findById()方法，用于仍需从一个view ，Activity，或者Dialog上初始化view的时候，并且它可以自动转换类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, null);  </span><br><span class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);  </span><br><span class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);  </span><br><span class="line">ImageView iv = ButterKnife.findById(view, R.id.iv);</span><br></pre></td></tr></table></figure></p><p>9）设置多个view的属性<br>apply()</p><p>作用：允许您立即对列表中的所有视图进行操作。</p><p>Action和Setter接口</p><p>作用：Action和Setter接口允许指定简单的行为。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class ButterknifeActivity extends AppCompatActivity &#123;  </span><br><span class="line">  </span><br><span class="line">    @BindViews(&#123;R2.id.first_name, R2.id.middle_name, R2.id.last_name&#125;)  </span><br><span class="line">    List&lt;EditText&gt; nameViews;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        //绑定activity  </span><br><span class="line">        ButterKnife.bind(this);  </span><br><span class="line">        //看不懂的小伙伴，多敲几遍代码，实际操作一下自然就懂了。相信我！如果你重复敲了10遍以上的代码，并认真思考了还没懂，欢迎给我评论留言。  </span><br><span class="line">          </span><br><span class="line">        //设置多个view的属性  </span><br><span class="line">        //方式1：传递值  </span><br><span class="line">        ButterKnife.apply(nameViews, DISABLE);  </span><br><span class="line">        //方式2：指定值  </span><br><span class="line">        ButterKnife.apply(nameViews, ENABLED, false);  </span><br><span class="line">        ////方式3 设置View的Property  </span><br><span class="line">        ButterKnife.apply(nameViews, View.ALPHA, 0.0f);//一个Android属性也可以用于应用的方法。  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /* </span><br><span class="line">    * Action接口设置属性 </span><br><span class="line">    */  </span><br><span class="line">    static final ButterKnife.Action&lt;View&gt; DISABLE = new ButterKnife.Action&lt;View&gt;() &#123;  </span><br><span class="line">        @Override  </span><br><span class="line">        public void apply(View view, int index) &#123;  </span><br><span class="line">            view.setEnabled(false);//目的是使多个view都具备此属性  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">    /* </span><br><span class="line">    * Setter接口设置属性 </span><br><span class="line">    */  </span><br><span class="line">    static final ButterKnife.Setter&lt;View, Boolean&gt; ENABLED = new ButterKnife.Setter&lt;View, Boolean&gt;() &#123;  </span><br><span class="line">        @Override  </span><br><span class="line">        public void set(View view, Boolean value, int index) &#123;  </span><br><span class="line">            view.setEnabled(value);//目的是使多个view都具备此属性，可变boolean值是可以传递的  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#Butter Knife的代码混淆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-keep class butterknife.** &#123; *; &#125;  </span><br><span class="line">-dontwarn butterknife.internal.**  </span><br><span class="line">-keep class **$$ViewBinder &#123; *; &#125;  </span><br><span class="line">  </span><br><span class="line">-keepclasseswithmembernames class * &#123;  </span><br><span class="line">    @butterknife.* &lt;fields&gt;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">-keepclasseswithmembernames class * &#123;  </span><br><span class="line">    @butterknife.* &lt;methods&gt;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kotlin语法</title>
      <link href="/2018/05/23/Kotlin%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/05/23/Kotlin%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Kotlin语法学习<br><a id="more"></a></p><p>##语法<br><code>Kotlin声明变量与Java声明变量有些不一样，Java变量类型在前，变量名在后，而Kotlin则相反，变量名在前，变量类型在后，中间加:(冒号)，并且Kotlin可以自动判断变量的类型。</code></p><p>声明局部常量（常量使用<code>val</code>关键字）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val a: Int = 1</span><br><span class="line">val b = 1   // 自动判断出Int类型</span><br><span class="line">val c: Int  // 当没有初始化值的时候要声明类型，全局常量不能这样写</span><br><span class="line">c = 1       // 赋值</span><br><span class="line"></span><br><span class="line">//作为全局常量时需要指定值</span><br><span class="line">val b : Int = 0</span><br><span class="line">val b = 0</span><br></pre></td></tr></table></figure></p><p>声明变量（变量使用<code>var</code>关键字）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x = 5 // 自动推断出Int类型</span><br><span class="line">x += 1</span><br></pre></td></tr></table></figure></p><p>#####函数定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">等同于java中的：</span><br><span class="line">private int getResult(int a, int b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">&#125;</span><br><span class="line"> */</span><br><span class="line">fun getResult(a: Int, b: Int): Int &#123;</span><br><span class="line">    return a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 这里的函数没有写返回值，Kotlin会自动判断返回值类型</span><br><span class="line">//如果一个函数只有一个并且是表达式函数体并且是返回类型自动推断的话，可以直接这样写</span><br><span class="line">fun getResult1(a: Int, b: Int) = a + b</span><br><span class="line"></span><br><span class="line">//返回无定义类型 Unit，或省略不写</span><br><span class="line">fun getResult2(a: Int, b: Int): Unit &#123;</span><br><span class="line">    print(a + b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>字符串</strong><br>使用<code>${变量}</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var x = &quot;2&quot;</span><br><span class="line">    var s = arrayOf(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;)</span><br><span class="line">    println(&quot;x:$&#123;x&#125;   s1:$&#123;s[0]&#125;  s2:&quot;+s[1])    //可以用`$&#123;变量&#125;`符号取值或在引号外面直接读</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>if判断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun max(a: Int, b: Int) = if (a &gt; b) a else b</span><br><span class="line">/*</span><br><span class="line">等同</span><br><span class="line">fun max(a: Int, b: Int): Int &#123;</span><br><span class="line">    if (a &gt; b) &#123;</span><br><span class="line">        return a</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><p><strong>使用可空变量和空置检查</strong><br><code>当一个变量、函数可能出现空值的时候，应该指出该引用可空</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun getResult4(a: Int, b: Int): Int ? &#123; // 设置函数返回类型可空</span><br><span class="line">    print(a + b)</span><br><span class="line">    return null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>类型检查</strong><br><code>is</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun getResult5(obj:Any):Int ?&#123;</span><br><span class="line">    if(obj is String)&#123;          // `obj`在这个分支中自动转换为`String`类型</span><br><span class="line">        return obj.length</span><br><span class="line">    &#125;</span><br><span class="line">    return null                  // `obj`仍然是`Any`类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun getResult6(x : Array&lt;String&gt;)&#123;</span><br><span class="line">    for (a in x)&#123;       // in操作符可以判断是否arg是否在args里面</span><br><span class="line">        println(a)</span><br><span class="line">    &#125;</span><br><span class="line">    for (i in x.indices)    //获取x范围循环</span><br><span class="line">        println(x[i])</span><br><span class="line">    var j = 0</span><br><span class="line">    while (j in x.indices)&#123;</span><br><span class="line">        print(x[j++])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>when表达式<br><code>when表达式就相当于Java的switch表达式，省去了case和break，并且支持各种类型</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fun cases(obj: Any) &#123;</span><br><span class="line">    when (obj) &#123;</span><br><span class="line">        1          -&gt; print(&quot;One&quot;) //如果obj的值为1</span><br><span class="line">        &quot;Hello&quot;    -&gt; print(&quot;Greeting&quot;) // 如果obj的值为hello</span><br><span class="line">        is Long    -&gt; print(&quot;Long&quot;) // 如果obj的类型是Long类型</span><br><span class="line">        !is String -&gt; print(&quot;Not a string&quot;) // 如果obj的类型不属于String类型</span><br><span class="line">        else       -&gt; print(&quot;Unknown&quot;) // 默认，相当于switch的default</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>range范围<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (x in 1..y-1) &#123; //1..y-1表示1到y-1的范围</span><br><span class="line">    print(&quot;OK&quot;)</span><br><span class="line">&#125;</span><br><span class="line">for (i in 1..100) &#123; ... &#125;  //  1到100范围</span><br><span class="line">for (i in 1 until 100) &#123; ... &#125; // 半开范围，不包括100，相当于[1,100)</span><br><span class="line">for (x in 2..10 step 2) &#123; ... &#125; // 每次夸2，内容为2,4,6,8,10</span><br><span class="line">for (x in 10 downTo 1) &#123; ... &#125; // 返序</span><br><span class="line">if (x in 1..10) &#123; ... &#125;</span><br></pre></td></tr></table></figure></p><p><strong>Getter和Setter</strong><br><code>声明属性的完整语法如下，语法中的初始化语句，getter和setter都是可选的</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var &lt;propertyName&gt;: &lt;PropertyType&gt; [= &lt;property_initializer&gt;]</span><br><span class="line">    [&lt;getter&gt;]</span><br><span class="line">    [&lt;setter&gt;]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var allByDefault: Int? // 错误: 需要一个初始化语句, 默认实现了 getter 和 setter 方法</span><br><span class="line">var initialized = 1 // 类型为 Int, 默认实现了 getter 和 setter</span><br><span class="line">val simple: Int? // 类型为 Int ，默认实现 getter ，但必须在构造函数中初始化</span><br><span class="line">val inferredType = 1 // 类型为 Int 类型,默认实现 getter</span><br><span class="line">//val不允许设置setter函数，因为它是只读的</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    var size = 0</span><br><span class="line">    var name : String ? = null</span><br><span class="line">        get() = field              //使用field来起到局部变量的作用,field标识符只允许在属性的访问器函数内使用</span><br><span class="line">        set(value)&#123;</span><br><span class="line">            field = value +&quot;s&quot;</span><br><span class="line">            println(value)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译时常量</strong><br>使用const修饰符标记为编译时常量. 这种属性需要同时满足以下条件: </p><ul><li>顶层或对象的成员(Top-level or member of an object)</li><li>以String或基本类型进行初始化</li><li>没有自定义getter<br>这种属性可以当作注解使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const val SUBSYSTEM_DEPRECATED: String = &quot;This subsystem is deprecated&quot;</span><br><span class="line"></span><br><span class="line">@Deprected(SUBSYSTEM_DEPRECATED) </span><br><span class="line">fun foo() &#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul><p>延迟初始化属性<br><code>在Kotlin中，声明为具有非空类型的属性必须在构造函数中初始化，但是往往不希望在构造函数中初始化，例如在通过依赖注入或单元测试的设置方法来初始化属性的时候，不能在构造器中提供一个非空的初始化语句，为了处理这种情况，就要在属性上加lateinit关键字来延迟初始化</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class MyTest &#123;</span><br><span class="line">    lateinit var subject: TestSubject</span><br><span class="line"></span><br><span class="line">    @SetUp fun setup() &#123;</span><br><span class="line">        subject = TestSubject()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test fun test() &#123;</span><br><span class="line">        subject.method() </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>lateinit只能够在var类型的属性中，不能用于构造函数，而且属性不能有自定义的getter和setting，这些属性必须是非空类型，并且不能是基本类型。</code></p><p><code>如果在一个延迟初始化的属性初始化前调用,会导致一个特定异常,调用的时候值还没有初始化.</code></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/22/hello-world/"/>
      <url>/2018/05/22/hello-world/</url>
      <content type="html"><![CDATA[<p>hello code<br><a id="more"></a></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
