<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>手机系统数据存储相关</title>
      <link href="/2018/06/16/%E6%89%8B%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9B%B8%E5%85%B3/"/>
      <url>/2018/06/16/%E6%89%8B%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<p>系统中几种存储数据的理解: </p><ol><li>要了解具体实现.  存在的原因, 适用的范围. 也就是想清楚  为什么要设计这个存储方式, 有什么用, 怎么用等。</li><li>要在eng 手机上， 能用adb 或者monitor等工具查看这些数据。<a id="more"></a><h2 id="常遇到的数据存储"><a href="#常遇到的数据存储" class="headerlink" title="常遇到的数据存储"></a>常遇到的数据存储</h2></li></ol><h3 id="share-preference"><a href="#share-preference" class="headerlink" title="share preference"></a>share preference</h3><p>应用内部的数据存储. 但有模式.<br>数据在 系统/data/data/下个apk 的 shared_prefs 目录下. 为xml文件 </p><h3 id="app-database"><a href="#app-database" class="headerlink" title="app database"></a>app database</h3><p>应用内部的数据存储. 但有模式.<br>数据在 系统/data/data/下个apk 的 databases 目录下. 为数据库文件, sqlite .     </p><h3 id="system-settings"><a href="#system-settings" class="headerlink" title="system settings"></a>system settings</h3><p>系统设置数据. 各程序通过系统接口可以访问, android 内部用<br>android.provider.Settings.getXXX(…)<br>android.provider.Settings.setXXX(…)<br>具体查看android.provider.Settings 的实现<br>数据在 系统/data/data/com.android.providers.settings/databases 目录下. 为数据库文件, sqlite . </p><p>和单独app开发不一样, 系统相关的修改经常会使用这个,特别是一些默认值.<br>这个默认值在 \alps\frameworks\base\packages\SettingsProvider 里面处理.<br>第一次开机的时候, 负责初始化数据库 </p><h3 id="system-properties"><a href="#system-properties" class="headerlink" title="system properties"></a>system properties</h3><p>系统属性数据. 一般是 android 和 其他部分通讯, 例如驱动, 一些固定的开关<br>通过android java端 android.os.SystemProperties 里面的get set 接口处理<br>ro.xxx 这种类型是只读的 来源是 /system/build.prop /root/default.prop 以及一些系统运行时设置的值<br>persisit.xxx 这种是一些可设置的值, 关机时是保存在 /data/property 里面 </p><p>系统service 实现在 alps\system\core\init\property_service.c/h 里面.</p><hr><h2 id="Android-SystemProperties简介"><a href="#Android-SystemProperties简介" class="headerlink" title="Android SystemProperties简介"></a><a href="http://www.cnblogs.com/hoji-real/articles/2362532.html">Android SystemProperties简介</a></h2><p>介绍了设置属性需要的权限，已经设置权限的方法。</p><p>Systemproperties类在android.os下，但这个类是隐藏的，上层程序开发无法直接使用。其实用java的反射机制是可以使用这个类。何谓java反射机制，请自行研究学习，在此不做介绍，放到后续文章中。用JNI的方式，可以绕过Systemproperties这个类，直接本地调用来实现创建、获取及修改系统属性。在此也不做介绍，也放到后续文章中。</p><p>这篇文章主要介绍android系统属性的命名方式：<br>创建与修改android属性用Systemproperties.set(name, value)，获取android属性用Systemproperties.get(name)，需要注意的是android属性的名称是有一定的格式要求的，如下：前缀必须用system\core\init\property_service.c中定义的前缀，进行系统属性设置的程序也必须有system或root权限，<br>如何将android程序的权限提升到system权限？方法是这样的：<br>1、在AndroidManifest.xml中，在manifest加入android:sharedUserId=”android.uid.system”。<br>2、在Android.mk中，將LOCAL_CERTIFICATE := XXX修改成LOCAL_CERTIFICATE :=platform。</p><h2 id="Android-的系统属性-SystemProperties-设置分析"><a href="#Android-的系统属性-SystemProperties-设置分析" class="headerlink" title="Android 的系统属性(SystemProperties)设置分析"></a><a href="http://www.blogjava.net/anymobile/articles/301989.html">Android 的系统属性(SystemProperties)设置分析</a></h2><p>介绍了取得、设置系统权限的流程。<br>Android 的系统属性包括两部分：文件保存的持久属性和每次开机导入的cache属性。前者主要保存在下面几个文件中：bionic/libc/include/sys/_system_properties.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define PROP_SERVICE_NAME &quot;property_service&quot;</span><br><span class="line">#define PROP_PATH_RAMDISK_DEFAULT  &quot;/default.prop&quot;</span><br><span class="line"> #define PROP_PATH_SYSTEM_BUILD     &quot;/system/build.prop&quot;</span><br><span class="line">#define PROP_PATH_SYSTEM_DEFAULT   &quot;/system/default.prop&quot;</span><br><span class="line"> #define PROP_PATH_LOCAL_OVERRIDE   &quot;/data/local.prop&quot;</span><br></pre></td></tr></table></figure></p><p>后者则通过frameworks/base/core/java/android/os/SystemProperties.java的接口定义，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">native_get</span><span class="params">(String key)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">native_get</span><span class="params">(String key, String def)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">native_set</span><span class="params">(String key, String def)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String val)</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (key.length() &gt; PROP_NAME_MAX) &#123; </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"key.length &gt; "</span> + PROP_NAME_MAX); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (val != <span class="keyword">null</span> &amp;&amp; val.length() &gt; PROP_VALUE_MAX) &#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"val.length &gt; "</span> +</span><br><span class="line">              PROP_VALUE_MAX);</span><br><span class="line">&#125;</span><br><span class="line">      native_set(key, val);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><br>该接口类在初始化运行环境中注册对应的cpp接口android_os_SystemProperties.cpp，实际操作通过JNI调用的是cpp文件对应的接口：frameworks/base/core/jni/AndroidRuntime.cpp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">namespace android &#123;</span><br><span class="line">     extern int register_android_os_SystemProperties(JNIEnv *env);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>frameworks/base/core/jni/android_os_SystemProperties.cpp<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SystemProperties_set</span><span class="params">(JNIEnv *env, jobject clazz, jstring keyJ, jstring valJ)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">       <span class="keyword">int</span> err; </span><br><span class="line">       <span class="keyword">const</span> <span class="keyword">char</span>* key; </span><br><span class="line">       <span class="keyword">const</span> <span class="keyword">char</span>* val; </span><br><span class="line">       key = env&gt;GetStringUTFChars(keyJ, <span class="literal">NULL</span>); </span><br><span class="line">       <span class="keyword">if</span> (valJ == <span class="literal">NULL</span>) &#123; </span><br><span class="line">            val = <span class="string">""</span>;       <span class="comment">/* NULL pointer not allowed here */</span> </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            val = env&gt;GetStringUTFChars(valJ, <span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         err = property_set(key, val);</span><br><span class="line">         env-&gt;ReleaseStringUTFChars(keyJ, key);        </span><br><span class="line">         <span class="keyword">if</span> (valJ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            env-&gt;ReleaseStringUTFChars(valJ, val);</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>设置key的value时，需要作鉴权，根据设置程序所在进程的fd获知uid值，比如system server进程可以设置net打头的key，不可以设置gsm打头的key，相关的定义如下：system/core/include/private/android_filesystem_config.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#define AID_ROOT             </span><br><span class="line"> /* traditional unix root user */</span><br><span class="line"> #define AID_SYSTEM        1000  /* system server */</span><br><span class="line">#define AID_RADIO         1001  /* telephony subsystem, RIL */</span><br><span class="line"> #define AID_DHCP          1014  /* dhcp client */</span><br><span class="line">#define AID_SHELL         2000  /* adb and debug shell user */</span><br><span class="line">#define AID_CACHE         2001  /* cache access */</span><br><span class="line">#define AID_APP          10000 /* first app user */</span><br></pre></td></tr></table></figure></p><p>system/core/init/property_service.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERSISTENT_PROPERTY_DIR  <span class="meta-string">"/data/property"</span> </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span> </span><br><span class="line">         <span class="keyword">const</span> <span class="keyword">char</span> *prefix; </span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> uid; </span><br><span class="line">    &#125; property_perms[] = &#123;</span><br><span class="line">         &#123; <span class="string">"net.rmnet0."</span>,    AID_RADIO &#125;, </span><br><span class="line">        &#123; <span class="string">"net.gprs."</span>,      AID_RADIO &#125;, </span><br><span class="line">         &#123; <span class="string">"ril."</span>,           AID_RADIO &#125;,</span><br><span class="line">         &#123; <span class="string">"gsm."</span>,           AID_RADIO &#125;,</span><br><span class="line">         &#123; <span class="string">"net.dns"</span>,        AID_RADIO &#125;,</span><br><span class="line">         &#123; <span class="string">"net.usb0"</span>,       AID_RADIO &#125;,</span><br><span class="line">         &#123; <span class="string">"net."</span>,           AID_SYSTEM &#125;,</span><br><span class="line">         &#123; <span class="string">"dev."</span>,           AID_SYSTEM &#125;,</span><br><span class="line">         &#123; <span class="string">"runtime."</span>,       AID_SYSTEM &#125;,</span><br><span class="line">         &#123; <span class="string">"hw."</span>,            AID_SYSTEM &#125;,</span><br><span class="line">         &#123; <span class="string">"sys."</span>,        AID_SYSTEM &#125;,</span><br><span class="line">         &#123; <span class="string">"service."</span>,    AID_SYSTEM &#125;,</span><br><span class="line">        &#123; <span class="string">"wlan."</span>,        AID_SYSTEM &#125;,</span><br><span class="line">         &#123; <span class="string">"dhcp."</span>,        AID_SYSTEM &#125;,</span><br><span class="line">         &#123; <span class="string">"dhcp."</span>,        AID_DHCP &#125;,</span><br><span class="line">         &#123; <span class="string">"debug."</span>,        AID_SHELL &#125;,</span><br><span class="line">         &#123; <span class="string">"log."</span>,        AID_SHELL &#125;,</span><br><span class="line">         &#123; <span class="string">"service.adb.root"</span>,    AID_SHELL &#125;,</span><br><span class="line">         &#123; <span class="string">"persist.sys."</span>,    AID_SYSTEM &#125;,</span><br><span class="line">         &#123; <span class="string">"persist.service."</span>,   AID_SYSTEM &#125;,</span><br><span class="line">         &#123; <span class="literal">NULL</span>, <span class="number">0</span> &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">property_set</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">char</span> *value)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         property_changed(name, value);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">start_property_service</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> fd;</span><br><span class="line">         load_properties_from_file(PROP_PATH_SYSTEM_BUILD);</span><br><span class="line">         load_properties_from_file(PROP_PATH_SYSTEM_DEFAULT);</span><br><span class="line">         load_properties_from_file(PROP_PATH_LOCAL_OVERRIDE);</span><br><span class="line">         <span class="comment">/* Read persistent properties after all default values have been loaded. */</span></span><br><span class="line">         load_persistent_properties();</span><br><span class="line">         fd = create_socket(PROP_SERVICE_NAME, SOCK_STREAM, <span class="number">0666</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">         <span class="keyword">if</span>(fd &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        fcntl(fd, F_SETFD, FD_CLOEXEC);</span><br><span class="line">         fcntl(fd, F_SETFL, O_NONBLOCK);</span><br><span class="line">         listen(fd, <span class="number">8</span>);</span><br><span class="line">         <span class="keyword">return</span> fd;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">handle_property_set_fd</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">switch</span>(msg.cmd) &#123;</span><br><span class="line">         <span class="keyword">case</span> PROP_MSG_SETPROP:</span><br><span class="line">             msg.name[PROP_NAME_MAX<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">             msg.value[PROP_VALUE_MAX1] = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">if</span>(<span class="built_in">memcmp</span>(msg.name,<span class="string">"ctl."</span>,<span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (check_control_perms(msg.value, cr.uid)) &#123;</span><br><span class="line">                     handle_control_message((<span class="keyword">char</span>*) msg.name + <span class="number">4</span>, (<span class="keyword">char</span>*) msg.value);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     ERROR(<span class="string">"sys_prop: Unable to %s service ctl [%s] uid: %d pid:%d\n"</span>,</span><br><span class="line">                             msg.name + <span class="number">4</span>, msg.value, cr.uid, cr.pid);</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (check_perms(msg.name, cr.uid)) &#123;</span><br><span class="line">                     property_set((<span class="keyword">char</span>*) msg.name, (<span class="keyword">char</span>*) msg.value);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ERROR(<span class="string">"sys_prop: permission denied uid:%d  name:%s\n"</span>,</span><br><span class="line">                          cr.uid, msg.name);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><br>在开机启动后的init操作中，会执行一个loop循环，当检测到有新的设置时，进入设置流程，鉴权失败会提示相关的异常，如sys_prop: permission denied uid:1000  name:gsm.phone.idsystem/core/init/init.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">property_changed</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">char</span> *value)</span> </span></span><br><span class="line"><span class="function">     </span>&#123; </span><br><span class="line">         <span class="keyword">if</span> (property_triggers_enabled) &#123; </span><br><span class="line">             queue_property_triggers(name, value); </span><br><span class="line">             drain_action_queue(); </span><br><span class="line">         &#125; </span><br><span class="line">     &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">        parse_config_file(<span class="string">"/init.rc"</span>);</span><br><span class="line">         qemu_init();</span><br><span class="line">        device_fd = device_init();</span><br><span class="line">         property_init();</span><br><span class="line">         fd = open(console_name, O_RDWR);</span><br><span class="line">        property_set_fd = start_property_service();</span><br><span class="line">         ufds[<span class="number">0</span>].fd = device_fd;</span><br><span class="line">         ufds[<span class="number">0</span>].events = POLLIN;</span><br><span class="line">         ufds[<span class="number">1</span>].fd = property_set_fd;</span><br><span class="line">         ufds[<span class="number">1</span>].events = POLLIN;</span><br><span class="line">        ufds[<span class="number">2</span>].fd = signal_recv_fd;</span><br><span class="line">         ufds[<span class="number">2</span>].events = POLLIN;</span><br><span class="line">         fd_count = <span class="number">3</span>;</span><br><span class="line">         <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">           <span class="keyword">if</span> (ufds[<span class="number">0</span>].revents == POLLIN)</span><br><span class="line">                 handle_device_fd(device_fd);</span><br><span class="line">             <span class="keyword">if</span> (ufds[<span class="number">1</span>].revents == POLLIN)</span><br><span class="line">                 handle_property_set_fd(property_set_fd);</span><br><span class="line">             <span class="keyword">if</span> (ufds[<span class="number">3</span>].revents == POLLIN)</span><br><span class="line">                 handle_keychord(keychord_fd);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Android属性系统"><a href="#Android属性系统" class="headerlink" title="Android属性系统"></a><a href="http://www.blogjava.net/MEYE/articles/359773.html">Android属性系统</a></h2><p>属性前缀的作用:<br>通常，属性都带有前缀，如ro.config、persist.xxx等。<br>对于ro前缀，只读属性，即第一次设置之后，以后都不能再改变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(pi != 0) &#123;</span><br><span class="line">        /* ro.* properties may NEVER be modified once set */</span><br><span class="line">        if(!strncmp(name, &quot;ro.&quot;, 3)) return -1;</span><br></pre></td></tr></table></figure></p><p>  persist前缀属性在初始加载属性时须注意，default属性未加载完成时，不能将其写入文件中，以免覆盖文件中的属性值。<br>  对于persist前缀，在设置属性的同时，还会将其写到/data/property/persist.xxx文件中，在系统重启时，将该属性值恢复到上机关机时的状态。那么什么时候加载的这些persist属性？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">on property:vold.decrypt=trigger_load_persist_props</span><br><span class="line">    load_persist_props</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void load_persist_props(void)</span><br><span class="line">&#123;</span><br><span class="line">    load_override_properties();</span><br><span class="line">    /* Read persistent properties after all default values have been loaded. */</span><br><span class="line">    load_persistent_properties();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载时机要控制好，一是在默认属性都加载完成后;二是等data分区挂载好之后，毕竟persist属性存储在data分区中。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Android反编译</title>
      <link href="/2018/06/16/Apk-decompile/"/>
      <url>/2018/06/16/Apk-decompile/</url>
      <content type="html"><![CDATA[<p>Apk简单反编译<br>反编译apk 主要有三个工具</p><ul><li>apktool       :反编译获取xml文件 资源文件</li><li>dex2jar        :把dex文件转换成jar文件</li><li>jd-gui            : 把.class.jar文件转化为java文件<a id="more"></a></li></ul><h2 id="下载apktool，反编译资源文件"><a href="#下载apktool，反编译资源文件" class="headerlink" title="下载apktool，反编译资源文件"></a>下载apktool，反编译资源文件</h2><p>地址：<a href="https://ibotpeaches.github.io/Apktool/install/">https://ibotpeaches.github.io/Apktool/install/</a></p><p>Installation for Apktool<br><strong>Windows</strong>:</p><ul><li>Download Windows <a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat">wrapper script</a> (Right click, Save Link As <code>apktool.bat</code>)</li><li>Download <code>apktool-2</code> (<a href="https://bitbucket.org/iBotPeaches/apktool/downloads/">find newest here</a>)</li><li>Rename downloaded jar to <code>apktool.jar</code></li><li>Move both files (<code>apktool.jar</code> &amp; <code>apktool.bat</code>) to your Windows directory (Usually <code>C://Windows</code>)</li><li>If you do not have access to <code>C://Windows</code>, you may place the two files anywhere then add that directory to your Environment Variables System PATH variable.</li><li>Try running <code>apktool</code> via command prompt</li></ul><p><strong>Linux</strong>:</p><ul><li>Download Linux <a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool">wrapper script</a> (Right click, Save Link As <code>apktool</code>)</li><li>Download <code>apktool-2</code> (<a href="https://bitbucket.org/iBotPeaches/apktool/downloads/">find newest here</a>)</li><li>Rename downloaded jar to <code>apktool.jar</code></li><li>Move both files (<code>apktool.jar</code> &amp; <code>apktool</code>) to  <code>/usr/local/bin</code> (root needed)</li><li>Make sure both files are executable (<code>chmod +x</code>)</li><li>Try running <code>apktool</code> via cli</li></ul><h3 id="下载dex2jar，反编译Java代码"><a href="#下载dex2jar，反编译Java代码" class="headerlink" title="下载dex2jar，反编译Java代码"></a>下载dex2jar，反编译<a href="http://lib.csdn.net/base/java">Java</a>代码</h3><p>1、下载地址：<a href="http://sourceforge.net/projects/dex2jar/files/">http://sourceforge.net/projects/dex2jar/files/</a>，源码地址：<a href="https://github.com/pxb1988/dex2jar">https://github.com/pxb1988/dex2jar</a><br>2、./dex2jar.sh classes.dex(原apk中的文件)，生成classes_dex2jar.jar</p><h2 id="下载jd-gui"><a href="#下载jd-gui" class="headerlink" title="下载jd-gui"></a>下载jd-gui</h2><p>1、下载地址：<a href="http://jd.benow.ca/">http://jd.benow.ca/</a>，下载deb包，然后使用sudo dpkg -i jd-gui_1.4.0-0_all.deb       </p><p>2、.使用JD-GUI图形界面来导入classes_dex2jar.jar，然后保存源文件 </p><hr><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><h4 id="反编译源码工具："><a href="#反编译源码工具：" class="headerlink" title="反编译源码工具："></a>反编译源码工具：</h4><p>dex2jar：将apk包中的classes.dex文件反编译成jar包。<br>jd-gui：将编译好的jar包用该软件打开直接显示为<a href="http://lib.csdn.net/base/java">Java</a>源码。</p><h4 id="打包、签名等工具"><a href="#打包、签名等工具" class="headerlink" title="打包、签名等工具"></a>打包、签名等工具</h4><p>apktool：用来获取资源文件，可以提取出图片文件和布局文件进行使用查看，另外也可以用来打包生成apk。</p><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p>1、首先找到我们需要反编译的xxx.apk文件，将其后缀修改为.zip，然后解压文件，在解压后的文件中可以找到classes.dex文件，将其拷贝到dex2jar.sh的同级目录下，如图： <img src="http://upload-images.jianshu.io/upload_images/2960353-58e7a5cb2cffd8b1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br>2.打开终端，进入到以上目录中，执行./dex2jar.sh classes.dex命令 如图： <img src="http://upload-images.jianshu.io/upload_images/2960353-6481f945645e5b22?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"> 然后在目录中会生成一个.jar文件 <img src="http://upload-images.jianshu.io/upload_images/2960353-ca295859dc0345f7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br>3.通过jd打开classes.dex2jar.jar文件就可以查看反编译过后的java代码了 <img src="http://upload-images.jianshu.io/upload_images/2960353-d951ae29ba816aaf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br>4.有关资源文件及AndroidMenifest.xml文件可以通过apktool工具来操作： 把apk拷到apktool根目录下， <img src="http://upload-images.jianshu.io/upload_images/2960353-4abd3e72e90625d0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br>5.打开终端，进入到上述目录，执行./apktool d xxx.apk ,然后会在该目录下生成名为xxx的目录，里面有res目录（各种资源文件），smali目录（类似src目录，里面文件的语法不一样）及AndroidManifest.xml。<br><img src="http://upload-images.jianshu.io/upload_images/2960353-4209ee7bd176fd9b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br><img src="http://upload-images.jianshu.io/upload_images/2960353-4c1b936db7952c31?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br><img src="http://upload-images.jianshu.io/upload_images/2960353-839f1036887e4333?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br>6.重新打包成apk 命令：./apktool b xxx(刚才反编译出来的目录名)</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Apk </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android JNI入门</title>
      <link href="/2018/06/16/Android-JNI/"/>
      <url>/2018/06/16/Android-JNI/</url>
      <content type="html"><![CDATA[<p>JNI简单生成so文件实例，Hello world<br><a id="more"></a></p><h2 id="JNI-Java-Natice-Interface"><a href="#JNI-Java-Natice-Interface" class="headerlink" title="JNI(Java Natice Interface)"></a>JNI(Java Natice Interface)</h2><p>JNI用C/C++编写接口，根据函数表查询调用核心库层里的底层方法，最终访问到Linux内核。</p><h3 id="Java-Native-Interface"><a href="#Java-Native-Interface" class="headerlink" title="Java Native Interface"></a>Java Native Interface</h3><p>调用core lib层的本地方法，JNI库是在Dalvik虚拟机启动时加载进去的，Dalvik会直接去寻址这个JNI方法，然后去调用。 </p><p><img src="http://upload-images.jianshu.io/upload_images/2960353-f629aba85909b738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="148906205286.png"></p><p>准备过程:</p><ol><li>创建一个类(HelloWorld.java)</li><li>使用 javac 编译该类</li><li>利用 javah -jni 产生头文件</li><li>用本地代码实现头文件中定义的方法</li><li>Run<br><img src="http://upload-images.jianshu.io/upload_images/2960353-9a0cfa9e0da1fa30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jni_helloworld.png"></li></ol><h3 id="JNI实例（Java调用C函数输出）"><a href="#JNI实例（Java调用C函数输出）" class="headerlink" title="JNI实例（Java调用C函数输出）"></a>JNI实例（Java调用C函数输出）</h3><p>Eclipse或手动新建一个HelloWorld类.</p><p>└── src<br>└── main<br>├── libMain.so<br>├── Main.c<br>├── Main.class<br>├── Main.java<br>├── main_Main.h<br>└── Main.o</p><h5 id="HelloWorld-java"><a href="#HelloWorld-java" class="headerlink" title="HelloWorld.java"></a>HelloWorld.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> HelloWorld().print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.loadLibrary(<span class="string">"HelloWorld"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah -jni HelloWorld //&quot;-jni&quot;为默认参数,可有可无.</span><br></pre></td></tr></table></figure></p><h5 id="生成HelloWorld-h"><a href="#生成HelloWorld-h" class="headerlink" title="生成HelloWorld.h"></a>生成HelloWorld.h</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;// 提供了本地编码需要调用的"JNI"接口的信息</span></span></span><br><span class="line"><span class="comment">/* Header for class HelloWorld */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_HelloWorld</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_HelloWorld</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     HelloWorld</span></span><br><span class="line"><span class="comment"> * Method:    print</span></span><br><span class="line"><span class="comment"> * Signature: ()V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_HelloWorld_print</span><br><span class="line">  (JNIEnv *, jobject);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>现在,请先忽略两个宏:JNIEXPORT 和 JNICALL。 你会发现,该函数声明,接受两个参数,而对应的 Java 代码对该函数的声明没有参数。第一个参数是指向 JNIEnv 结构的指针; 第二个参数,为 HelloWorld 对象自身,即 this 指针。</code><br>注：JNIEnv 是 JNI 核心数据之一,地位非常崇高,所有对 JNI 的调用都要通过此结构。</p><h5 id="HelloWorld-c"><a href="#HelloWorld-c" class="headerlink" title="HelloWorld.c"></a>HelloWorld.c</h5><p>通过参考 javah 产生的 JNI头文件 书写本地方法。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HelloWorld.h"</span></span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_HelloWorld_print(JNIEnv *env, jobject obj)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello World Jni!\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>注：&quot;jni.h&quot;文件必须被包含,该文件定义了 JNI 所有的函数声明和数据类型。环境配置编译</code><br><code>注：生成的so本地库的名字,必须与 System.loadLibrary(&quot;HelloWorld&quot;);待装载库的名字相同。</code></p><p>生成HelloWorld.o -I 设置C头文件搜索路径，-L 设置动态静态库搜索路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC HelloWorld.c -I /home/xuwei/jdk1.8.0_121/include //找到jni.h目录</span><br></pre></td></tr></table></figure></p><p>生成动态库文件 libHelloWorld.so<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC -o libHelloWorld.so HelloWorld.o</span><br></pre></td></tr></table></figure></p><p>设置Java查找库文件路径，必须绝对当前目录export<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=/home/xuwei/test/</span><br></pre></td></tr></table></figure></p><p>成功让C函数输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure></p><p>To:Hello World Jni!</p><p><code>注：中途遇到过jni.h中找不到jni_md.h头文件，添加头文件地址(其他头文件同理)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;/home/xuwei/jdk1.8.0_121/include/linux/jni_md.h&quot;</span><br></pre></td></tr></table></figure></p><p>运行前,必须保证连接器,能找到待装载的库,不然,将抛如下异常:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.UnsatisfiedLinkError: no HelloWorld in library path</span><br><span class="line">  at java.lang.Runtime.loadLibrary(Runtime.java)</span><br><span class="line">  at java.lang.System.loadLibrary(System.java)</span><br><span class="line">  at HelloWorld.main(HelloWorld.java)</span><br></pre></td></tr></table></figure></p><h4 id="加载过程"><a href="#加载过程" class="headerlink" title="加载过程"></a>加载过程</h4><p>加载动态库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static&#123; System.loadlibrary(&quot;media_jni&quot;);&#125;</span><br></pre></td></tr></table></figure></p><p>以MediaScanner为例<br>/home/st/android-source/frameworks/base/media/java/android/media/MediaScanner.java</p><p><img src="http://upload-images.jianshu.io/upload_images/2960353-0f9ecb7cd4406796.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="148906210473.png"><br>注册JNI函数 静态方法</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> JNI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装git服务器</title>
      <link href="/2018/05/26/%E5%AE%89%E8%A3%85Gogs/"/>
      <url>/2018/05/26/%E5%AE%89%E8%A3%85Gogs/</url>
      <content type="html"><![CDATA[<p>github估计大家少不了熟悉吧，但如果想自己搭个git托管网站呢？喔，不要慌，这里有个现成简易的框架：gogs，效果不错，且可以自定义加很多功能<br><a id="more"></a></p><p>主要简单介绍安装的过程，因为如果只是搭建使用，那过程其实还是蛮简单的，搞几步命令和页面内的配置就能实现。这里也是给自己做个记录吧，备忘。文中主要记录了关键的一些命令，省略了不少步骤，我也没做细的记录，具体详细过程还是可以找度娘滴。</p><h2 id="配置CentOS-6-0-第三方yum源"><a href="#配置CentOS-6-0-第三方yum源" class="headerlink" title="配置CentOS 6.0 第三方yum源"></a>配置CentOS 6.0 第三方yum源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.atomicorp.com/installers/atomic</span><br><span class="line">sh ./atomic</span><br><span class="line">yum check-update</span><br></pre></td></tr></table></figure><h2 id="开发库文件"><a href="#开发库文件" class="headerlink" title="开发库文件"></a>开发库文件</h2><blockquote><p>一次性把多个库都装了，简单暴力，不用花太多精力，看报错一个个更新下载，这个也是我参照网上以及自己安装报错整合的一些库名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2 libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel</span><br></pre></td></tr></table></figure><h2 id="nginx-amp-mysql"><a href="#nginx-amp-mysql" class="headerlink" title="nginx &amp; mysql"></a>nginx &amp; mysql</h2><p>基本环境安装，数据库肯定也不用说了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line">service nginx start</span><br><span class="line">chkconfig --levels 235 nginx on</span><br><span class="line"></span><br><span class="line">yum install mysql mysql-server mysql-devel</span><br><span class="line">service mysqld start</span><br><span class="line">chkconfig --levels 235 mysqld on</span><br></pre></td></tr></table></figure></p><ul><li>数据库用户<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select user,host,password from mysql.user;</span><br><span class="line">drop user &apos;&apos;@localhost;</span><br><span class="line">update mysql.user set password = PASSWORD(&apos;xxxxxxx&apos;) where user=&apos;root&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul><p>获取gogs安装包可能会报错，用<code>--no-check-certificate</code>强制下载即可</p><p>Error<br>–2017-07-30 12:27:30–  <a href="https://dl.gogs.io/0.11.19/linux_amd64.tar.gz">https://dl.gogs.io/0.11.19/linux_amd64.tar.gz</a><br>Resolving dl.gogs.io… 138.68.27.161<br>Connecting to dl.gogs.io|138.68.27.161|:443… connected.<br>ERROR: certificate common name “gogs.io” doesn’t match requested host name “dl.gogs.io”.<br>To connect to dl.gogs.io insecurely, use ‘–no-check-certificate’.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://dl.gogs.io/0.11.19/linux_amd64.zip</span><br></pre></td></tr></table></figure></p><h2 id="Mysql-用户"><a href="#Mysql-用户" class="headerlink" title="Mysql 用户"></a>Mysql 用户</h2><p>用户信息设置转到Gogs页面手动设置即可，如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/2960353-de2ad3ddb32cfd4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="修改Gogs配置"><a href="#修改Gogs配置" class="headerlink" title="修改Gogs配置"></a>修改Gogs配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi gogs/custom/conf/app.ini</span><br></pre></td></tr></table></figure><h2 id="切换后启动服务（在gogs目录下操作）"><a href="#切换后启动服务（在gogs目录下操作）" class="headerlink" title="切换后启动服务（在gogs目录下操作）"></a>切换后启动服务（在gogs目录下操作）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$nohup ./gogs web &amp;</span><br></pre></td></tr></table></figure><p>然后就ok了，关闭putty不影响服务<br>关于重启，需要先结束gogs进程，gogs默认端口位3000，查询端口进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$lsof -i:3000</span><br></pre></td></tr></table></figure></p><p>然后杀死进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$kill -9 pid</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/2960353-abbdc91a9839b7dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自动草稿"><br>例如查询到的pid为20833，则执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$kill -9 20833</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>添加资源到framework层</title>
      <link href="/2018/05/26/%E6%B7%BB%E5%8A%A0%E8%B5%84%E6%BA%90%E5%88%B0framework%E5%B1%82/"/>
      <url>/2018/05/26/%E6%B7%BB%E5%8A%A0%E8%B5%84%E6%BA%90%E5%88%B0framework%E5%B1%82/</url>
      <content type="html"><![CDATA[<p><code>@android:style/xxx</code>、<code>?android:attr/xxx</code> 如果做过Android开发，看到这些，那你有没有想起些什么。这个就是在framework中声明的，想要了解原生资源的编译和替换，这篇文章了解一下吧</p><p><strong>本篇主要介绍的是framework增加资源及编译过程</strong></p><a id="more"></a><p>常规Android手机第三方系统定制界面，编译的都是packages下路径资源和代码。但对于原生底层基类相关，主要还是在framework中，对应编译的方式也有所不同</p><p>Android开发过程中有时候经常会调用到系统自带的资源文件，比如：<br><code>style=&quot;?android:attr/progressBarStyleLarge&quot;</code><br><code>android:theme=&quot;@android:style/Theme.Dialog&quot;</code><br><code>android:textAppearance=&quot;@android:style/TextAppearance.DeviceDefault.Medium&quot;</code></p><p>接下来看看怎么添加对应的资源文件（要有Android编译基础，对源代码稍微有些了解）</p><h2 id="关于framework-res中字符串添加"><a href="#关于framework-res中字符串添加" class="headerlink" title="关于framework-res中字符串添加"></a><strong>关于framework-res中字符串添加</strong></h2><p>在framework-res中添加字符串test_string，修改以下文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/core/res/res/values/public.xml</span><br><span class="line">frameworks/base/core/res/res/values/strings.xml</span><br></pre></td></tr></table></figure></p><p>编译（mmm framework/base/core/res -B），之后检验是否将test_string添加到了R.java，查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out/target/common/R/com/android/internal/R.java</span><br><span class="line">out/target/common/R/android/R.java</span><br></pre></td></tr></table></figure></p><p>test_string已经被生成为R.string类中的成员变量，说明添加成功。<br>然后在PhoneWindowManager中引用com.android.internal.R.string.test_string，编译(<code>mmm framework/base/policy</code>)，报找不到符号的错误。</p><p>尝试更新api声明（<code>make update-api</code>），./frameworks/base/api/current.txt 被重新生成。再编译policy，通过。<br>查看./frameworks/base/api/current.txt， public static final class R.string中自动生成了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static final class R.string &#123; </span><br><span class="line">    ctor public R.string();</span><br><span class="line">    //.... </span><br><span class="line">    field public static final int test_string = 17039392; // 0x1040020</span><br><span class="line">    //... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>make update-api</code>更新的是公共api，如果仅添加framework内部使用的api、资源，应该没有必要每次都update-api，说明资源的添加方法还是有问题。<br>经查证，大部分字符串没有在public.xml中声明，而是在./frameworks/base/core/res/res/values/symbols.xml中被声明。而symbols中声明的字符串ID没有在current.txt中找到，应该是framework内部使用的非公共资源。<br>因此，在framework中添加一个内部使用的字符串，仅需修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/core/res/res/values/symbols.xml</span><br><span class="line">frameworks/base/core/res/res/values/strings.xml</span><br></pre></td></tr></table></figure></p><p>而添加一个所有应用程序都可以调用到的字符串资源，则需要修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/core/res/res/values/public.xml</span><br><span class="line">frameworks/base/core/res/res/values/strings.xml</span><br></pre></td></tr></table></figure></p><p>另外需要注意的是，修改xml后最好强制重新编译framework-res（<code>mmm framework/base/core/res -B</code>），以免出现R.java没有重新生成的问题。</p><h2 id="编译带有资源的jar包，需要更改frameworks层"><a href="#编译带有资源的jar包，需要更改frameworks层" class="headerlink" title="编译带有资源的jar包，需要更改frameworks层"></a>编译带有资源的jar包，需要更改frameworks层</h2><p>方法如下：</p><h3 id="增加png类型的图片资源"><a href="#增加png类型的图片资源" class="headerlink" title="增加png类型的图片资源"></a>增加png类型的图片资源</h3><ol><li>将appupdate模块所有用到的png格式图片拷贝到framework/base/core/res/res/drawable-mdpi里。但是要确保没有与原生的没有重名文件。</li><li>在framework/base/core/res/res/values/public.xml文件里增加对这些图片的声明。（例: &lt;public type=”drawable”name=”upg_btn_default_small_normal” id =”0x0108 00b4” /&gt;,此id要保证唯一，以drawable类型的最后一个id为基数增加）</li><li>framework/base/core/res/res/ 下mm编译</li><li>\Honeycomb下 make update-api</li></ol><h3 id="增加string资源"><a href="#增加string资源" class="headerlink" title="增加string资源"></a>增加string资源</h3><ol><li>将appupdate模块定义的string.xml里面的所以string拷贝到framework/base/core/res/res/values/string.xml里。但是确保没有重名的。</li><li>在framework/base/core/res/res/values/public.xml文件里增加对这些string的声明。（例：&lt;publictype=”string” name=”upg_app_name” id=”0x01040017”/&gt;此id要保证唯一，以string类型的最后一个id为基数增加）</li><li>framework/base/core/res/res/ 下mm编译</li><li>\Honeycomb下 make update-api</li></ol><h3 id="增加layout资源"><a href="#增加layout资源" class="headerlink" title="增加layout资源"></a>增加layout资源</h3><ol><li>将appupdate模块的layout文件里定义的5个xml文件拷贝到在framework/base/core/res/res/layout里。但是要确保没有重名文件被覆盖。</li><li>在framework/base/core/res/res/values/public.xml文件里增加对这些layout的声明。（例：&lt;publictype=”layout” name=”appupg_checkspace”id=”0x01090018” /&gt;此id要保证唯一，以layout类型的最后一个id为基数增加）</li><li>framework/base/core/res/res/ 下mm编译</li><li>\Honeycomb下 make update-api说明：若layout 中包含xml,直接把xml拷贝到framework相应目录下。例如<br>（1）button的selector。将appupdate模块的drawable/common_btn_selector.xml文件拷贝到framework/base/core/res/res/drawable里，确保没有重名文件。<br>（2）将appupdate模块的anim/loading.xml文件拷贝到framework/base/core/res/res/anim里，确保没有重名文件。</li></ol><h3 id="增加style资源"><a href="#增加style资源" class="headerlink" title="增加style资源"></a>增加style资源</h3><ol><li>将appupdate模块的style文件里定义的所有style拷贝到framework/base/core/res/res/values/style.xml里。确保没有覆盖原生的style.</li><li>在framework/base/core/res/res/values/public.xml文件里增加对这些style的声明。</li><li>framework/base/core/res/res/ 下mm编译</li><li>\Honeycomb下 make update-api</li></ol><h3 id="增加color资源"><a href="#增加color资源" class="headerlink" title="增加color资源"></a>增加color资源</h3><ol><li>将appupdate模块的style文件里定义的所有style拷贝到framework/base/core/res/res/values/color.xml里。确保没有覆盖原生的color.</li><li>在framework/base/core/res/res/values/public.xml文件里增加对这些color的声明。</li><li>framework/base/core/res/res/ 下mm编译</li><li>\Honeycomb下 make update-api</li></ol><h3 id="增加资源id"><a href="#增加资源id" class="headerlink" title="增加资源id"></a>增加资源id</h3><ol><li>在framework/base/core/res/res/values/ids.xml里定义你jar中所用的id（R.id）*）。确保没有覆盖原生的.</li><li>在framework/base/core/res/res/values/public.xml文件里增加对这些id的声明。</li><li>framework/base/core/res/res/ 下mm编译</li><li>\Honeycomb下 make update-api</li></ol><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>eclipse源码中要修改以下：</p><ol><li>把R.<em>.</em>全部替换成android.R.<em>.</em>例如R.layout.appupg_tip_dialog 要更换为android. R.layout.appupg_tip_dialog</li><li>资源文件中对资源的调用需要添加android：如&lt;TextView android:text=”@ string/upg_tip”要改成&lt;TextViewandroid:text=”@ android: string/upg_tip”</li><li>Import <em>.</em>.<em>.R删除。linux下jar包路径Honeycomb\out\target\common\obj\J**</em>A_LIBRARIES\hisenseAppUpgrade_sdk_intermediates</li></ol><p>另,要想在eclipse环境下编译修改后的应用自升级jar。<br>  从编译的源码中拷贝framework.jar及framework-res.apk两个文件，解压缩后。从framework.jar中拷贝出android文件夹，从framework-res.apk拷贝出res文件夹，然后添加到android.jar包中。替换自升级工程的android.jar。然后把res文件夹下出现X的文件删除即可。</p><p>应用自升级修改方法资源修改要通过frameworks层，修改后要在源码中编译。</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framwork </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前言</title>
      <link href="/2018/05/24/forward/"/>
      <url>/2018/05/24/forward/</url>
      <content type="html"><![CDATA[<div id="music163player" align="center" ><br>    <img src="https://picsum.photos/1920/1080/?random" width = 100% height = 50% alt="前言" ><br></div><p>  由于之前的博客几乎都在简书，虽然也是md，但是内容格式有所区别，还是以后慢慢移吧</p><a id="more"></a><h2 id="本文没有多余的内容"><a href="#本文没有多余的内容" class="headerlink" title="本文没有多余的内容"></a>本文没有多余的内容</h2>]]></content>
      
      
        <tags>
            
            <tag> 前言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ButterKnife</title>
      <link href="/2018/05/23/ButterKnife/"/>
      <url>/2018/05/23/ButterKnife/</url>
      <content type="html"><![CDATA[<p>ButterKnife 8.1</p><div id="bkimg" align="center" ><br>    <img src="http://jakewharton.github.io/butterknife/static/logo.png" width = 20% height = 20% alt="ButterKnife" ><br></div><a id="more"></a><p>项目地址：<a href="https://github.com/JakeWharton/butterknife">https://github.com/JakeWharton/butterknife</a><br>AS插件：Android Butterknife Zelezny</p><h2 id="一、优点"><a href="#一、优点" class="headerlink" title="一、优点"></a>一、优点</h2><p>1） 强大的View绑定和Click事件处理功能，简化代码，提升开发效率 </p><p>2）方便的处理Adaper里的ViewHolder绑定问题 </p><p>3） 运行时不会影响app效率，使用配置方便 </p><p>4）代码清晰，可读性强</p><h2 id="二、添加依赖"><a href="#二、添加依赖" class="headerlink" title="二、添加依赖"></a>二、添加依赖</h2><p>在module的build.gradle 文件中的dependencies标签中添加代码如下（导入库的依赖）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;  </span><br><span class="line">  compile &apos;com.jakewharton:butterknife:8.8.1&apos;  </span><br><span class="line">  annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.8.1&apos;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在module的build.gradle 文件中设置支持插件 ，添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.library&apos;  </span><br><span class="line">apply plugin: &apos;com.jakewharton.butterknife&apos;</span><br></pre></td></tr></table></figure></p><p><code>（注：这条是开发者给出的配置，目前不加此配置也是不影响正常使用的，但小区别还是有的（eg：R2.id.XXX能否正常使用），是否作此配置看使用者自己吧，本人建议加此配置。）</code></p><h2 id="三、Butter-Knife的注册"><a href="#三、Butter-Knife的注册" class="headerlink" title="三、Butter Knife的注册"></a>三、Butter Knife的注册</h2><h3 id="1-使用注意事项"><a href="#1-使用注意事项" class="headerlink" title="1.使用注意事项"></a>1.使用注意事项</h3><ol><li><p>在Activity 类中绑定 ：ButterKnife.bind(this);必须在setContentView();之后绑定；且父类bind绑定后，子类不需要再bind。</p></li><li><p>在非Activity 类（eg：Fragment、ViewHold）中绑定：ButterKnife.bind(this，view);</p></li></ol><p>这里的this不能替换成getActivity（）。</p><ol start="3"><li><p>在Activity中不需要做解绑操作，在Fragment 中必须在onDestroyView()中做解绑操作。</p></li><li><p>使用ButterKnife修饰的方法和控件，不能用private or static 修饰，否则会报错。</p></li><li><p>setContentView()不能通过注解实现。（其他的有些注解框架可以）</p></li><li><p>使用Activity为根视图绑定任意对象时，如果你使用类似MVC的设计模式你可以在Activity 调用ButterKnife.bind(this, activity)，来绑定Controller。</p></li><li><p>使用ButterKnife.bind(this，view)绑定一个view的子节点字段。如果你在子View的布局里或者自定义view的构造方法里 使用了inflate,你可以立刻调用此方法。或者，从XML inflate来的自定义view类型可以在onFinishInflate回调方法中使用它。</p></li></ol><h3 id="2-在Activity中绑定ButterKnife"><a href="#2-在Activity中绑定ButterKnife" class="headerlink" title="2.在Activity中绑定ButterKnife"></a>2.在Activity中绑定ButterKnife</h3><p>使用：ButterKnife.bind(this);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity&#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">        //绑定初始化ButterKnife  </span><br><span class="line">        ButterKnife.bind(this);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-在Fragment中绑定ButterKnife"><a href="#3-在Fragment中绑定ButterKnife" class="headerlink" title="3.在Fragment中绑定ButterKnife"></a>3.在Fragment中绑定ButterKnife</h3><p>使用：ButterKnife.bind(this, view);</p><p>Fragment的生命周期不同于activity。在onCreateView中绑定一个Fragment时，在onDestroyView中将视图设置为null。</p><p>当你调用bind来为你绑定一个Fragment时,Butter Knife会返回一个Unbinder的实例。</p><p>在适当的生命周期（onDestroyView）回调中调用它的unbind方法进行Fragment解绑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Unbinder unbinder;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,  </span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        View view = inflater.inflate(R.layout.fragment, container, <span class="keyword">false</span>);  </span><br><span class="line">        <span class="comment">//返回一个Unbinder值（进行解绑），注意这里的this不能使用getActivity()  </span></span><br><span class="line">        unbinder = ButterKnife.bind(<span class="keyword">this</span>, view);  </span><br><span class="line">        <span class="keyword">return</span> view;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * onDestroyView中进行解绑操作 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onDestroyView();  </span><br><span class="line">        unbinder.unbind();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="4-在Adapter中绑定ButterKnife"><a href="#4-在Adapter中绑定ButterKnife" class="headerlink" title="4.在Adapter中绑定ButterKnife"></a>4.在Adapter中绑定ButterKnife</h3><p>使用：ButterKnife.bind(this, view);</p><p>在Adapter的ViewHolder中使用，将ViewHolder加一个构造方法，在new ViewHolder的时候把view传递进去。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// 部分代码省略...  </span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span>   </span><br><span class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View view, ViewGroup parent)</span> </span>&#123;  </span><br><span class="line">    ViewHolder holder;  </span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;  </span><br><span class="line">      holder = (ViewHolder) view.getTag();  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      view = inflater.inflate(R.layout.testlayout, parent, <span class="keyword">false</span>);  </span><br><span class="line">      holder = <span class="keyword">new</span> ViewHolder(view);  </span><br><span class="line">      view.setTag(holder);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    holder.name.setText(<span class="string">"诺诺"</span>);  </span><br><span class="line">    <span class="comment">// etc...  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> view;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@BindView</span>(R.id.title) TextView name;  </span><br><span class="line">    <span class="meta">@BindView</span>(R.id.job_title) TextView jobTitle;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;  </span><br><span class="line">      ButterKnife.bind(<span class="keyword">this</span>, view);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><h2 id="四、Butter-Knife的使用"><a href="#四、Butter-Knife的使用" class="headerlink" title="四、Butter Knife的使用"></a>四、Butter Knife的使用</h2><h3 id="1-使用注意事项-1"><a href="#1-使用注意事项-1" class="headerlink" title="1.使用注意事项"></a>1.使用注意事项</h3><p>1）ButterKinfe的注解标签因版本不同而有所变化。8.0.0之前的Bind标签在8.0.0之后变成了BindView，</p><p>而8.7.0之后在绑定view时，要用R2.id.XXX，而不再是常用的R.id.XXX。</p><p>Note：我在实际使用时用R.id.XXX和R2.id.XXX都可以，目前本人并未发现有什么异常。自动生成代码时是R.id.XXX；建议使用R2.id.XXX。因为网上都说使用R2是因为library中的R字段的id值不是final类型的，但是你的应用module中确是final类型的……</p><p>2）默认情况下，@bind和 listener 的绑定是必需的。如果无法找到目标视图，将抛出一个异常。<br>要抑制此行为并创建可选绑定，可以将@Nullable注解添加到字段中，或将@Optional注解添加到方法。</p><p>Note:任何被命名为@Nullable的注解都可以用于成员变量。鼓励使用Android的”support-annotations”库中的@Nullable注解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Nullable  </span><br><span class="line">@BindView(R.id.might_not_be_there)   </span><br><span class="line">TextView mightNotBeThere;  </span><br><span class="line">  </span><br><span class="line">@Optional  </span><br><span class="line">@OnClick(R.id.maybe_missing)   </span><br><span class="line">public void onMaybeMissingClicked() &#123;  </span><br><span class="line">    // TODO ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-绑定注解"><a href="#2-绑定注解" class="headerlink" title="2.绑定注解"></a>2.绑定注解</h3><p>@BindView—-&gt;绑定一个view；id为一个view 变量</p><p>@BindViews  —-&gt;<br> 绑定多个view；id为一个view的list变量</p><p>@BindArray—-&gt;<br> 绑定string里面array数组；@BindArray(R.array.city ) String[] citys ;</p><p>@BindBitmap—-&gt;绑定图片资源为Bitmap；@BindBitmap(<br> R.mipmap.wifi ) Bitmap bitmap;</p><p>@BindBool —-&gt;绑定boolean值</p><p>@BindColor —-&gt;绑定color；@BindColor(R.color.colorAccent)<br> int black;</p><p>@BindDimen —-&gt;绑定Dimen；@BindDimen(R.dimen.borth_width)<br> int mBorderWidth;</p><p>@BindDrawable<br>—-&gt; 绑定Drawable；@BindDrawable(R.drawable.test_pic) Drawable mTestPic;</p><p>@BindFloat —-&gt;绑定float</p><p>@BindInt —-&gt;绑定int</p><p>@BindString —-&gt;绑定一个String id为一个String变量；@BindString(<br> R.string.app_name ) String meg;</p><h3 id="3-事件注解"><a href="#3-事件注解" class="headerlink" title="3.事件注解"></a>3.事件注解</h3><p>(注：此处作个统计，后面会有详细解释)</p><p>@OnClick—-&gt;点击事件<br>@OnCheckedChanged —-&gt;选中，取消选中<br>@OnEditorAction —-&gt;软键盘的功能键<br>@OnFocusChange —-&gt;焦点改变<br>@OnItemClick item—-&gt;被点击(注意这里有坑，如果item里面有Button等这些有点击的控件事件的，需要设置这些控件属性focusable为false)<br>@OnItemLongClick item—-&gt;长按(返回真可以拦截onItemClick)<br>@OnItemSelected —-&gt;item被选择事件<br>@OnLongClick —-&gt;长按事件<br>@OnPageChange —-&gt;页面改变事件<br>@OnTextChanged —-&gt;EditText里面的文本变化事件<br>@OnTouch —-&gt;触摸事件<br>@Optional —-&gt;</p><p>选择性注入，如果当前对象不存在，就会抛出一个异常，为了压制这个异常，可以在变量或者方法上加入一下注解,让注入变成选择性的,如果目标View存在,则注入, 不存在,则什么事情都不做=如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Optional  </span><br><span class="line">@OnCheckedChanged(R.id.cb_test)  </span><br><span class="line">public void onCheckedChanged(CompoundButton buttonView,boolean isChecked)&#123;  </span><br><span class="line">    if(isChecked)&#123;  </span><br><span class="line">        tvTest.setText(&quot;被选中...&quot;);  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        tvTest.setText(&quot;被取消...&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-绑定view"><a href="#4-绑定view" class="headerlink" title="4.绑定view"></a>4.绑定view</h3><p>1）@BindView() : 布局id 注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@BindView( R2.id.button)  </span><br><span class="line">public Button button;</span><br></pre></td></tr></table></figure><p>2）@BindViews(): 布局内多个控件 id 注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindViews</span>(&#123; R2.id.button1, R2.id.button2,  R2.id.button3&#125;)  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Button&gt; buttonList ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">  </span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);  </span><br><span class="line">  </span><br><span class="line">        buttonList.get( <span class="number">0</span> ).setText( <span class="string">"hello 1 "</span>);  </span><br><span class="line">        buttonList.get( <span class="number">1</span> ).setText( <span class="string">"hello 2 "</span>);  </span><br><span class="line">        buttonList.get( <span class="number">2</span> ).setText( <span class="string">"hello 3 "</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><h3 id="5-绑定资源"><a href="#5-绑定资源" class="headerlink" title="5.绑定资源"></a>5.绑定资源</h3><p>1）@BindString() ：绑定string 字符串<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindView</span>(R2.id.button) <span class="comment">//绑定button 控件  </span></span><br><span class="line">    <span class="keyword">public</span> Button button ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindString</span>(R2.string.app_name)  <span class="comment">//绑定资源文件中string字符串  </span></span><br><span class="line">    String str;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">        button.setText( str );  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>2）@BindArray() : 绑定string里面array数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;  </span><br><span class="line">    &lt;string name=&quot;app_name&quot;&gt;城市&lt;/string&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;string-array name=&quot;city&quot;&gt;  </span><br><span class="line">        &lt;item&gt;北京市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;天津市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;哈尔滨市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;大连市&lt;/item&gt;  </span><br><span class="line">        &lt;item&gt;香港市&lt;/item&gt;  </span><br><span class="line">    &lt;/string-array&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindView</span>(R2.id.button) <span class="comment">//绑定button 控件  </span></span><br><span class="line">    <span class="keyword">public</span> Button button ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindString</span>(R2.string.app_name)  <span class="comment">//绑定资源文件中string字符串  </span></span><br><span class="line">    String str;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindArray</span>(R2.array.city)  <span class="comment">//绑定string里面array数组  </span></span><br><span class="line">    String [] citys ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">        button.setText(citys[<span class="number">0</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>3）@BindBitmap( ) : 绑定Bitmap 资源<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindView</span>( R2.id.imageView ) <span class="comment">//绑定ImageView 控件  </span></span><br><span class="line">    <span class="keyword">public</span> ImageView imageView ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindBitmap</span>(R2.drawable.bm)<span class="comment">//绑定Bitmap 资源  </span></span><br><span class="line">    <span class="keyword">public</span> Bitmap bitmap ;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">  </span><br><span class="line">        imageView.setImageBitmap(bitmap);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br><code>这里的图片资源引用存在一个小问题：drawable文件夹下的图片使用R或R2引用都没问题；但是mipmap文件夹下的图片资源引用目前只能使用R。</code><br>4）@BindColor( ) : 绑定一个颜色值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindView</span>( R2.id.button)  <span class="comment">//绑定一个控件  </span></span><br><span class="line">    <span class="keyword">public</span> Button button;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindColor</span>( R2.color.colorAccent ) <span class="comment">//具体色值在color文件中  </span></span><br><span class="line">    <span class="keyword">int</span> black ;  <span class="comment">//绑定一个颜色值  </span></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">  </span><br><span class="line">        button.setTextColor(  black );  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p><h3 id="6-点击事件绑定"><a href="#6-点击事件绑定" class="headerlink" title="6.点击事件绑定"></a>6.点击事件绑定</h3><blockquote><p>不用声明view，不用setOnClickLisener（）就可以绑定点击事件</p></blockquote><p>1）绑定事件</p><p>@OnClick( ) : 绑定控件点击事件<br>@OnLongClick( ) ： 绑定控件长按事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@OnClick</span>(R2.id.button1 )   <span class="comment">//给 button1 设置一个点击事件  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"is a click"</span>, Toast.LENGTH_SHORT).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@OnLongClick</span>( R2.id.button1 )    <span class="comment">//给 button1 设置一个长按事件  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">showToast2</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"is a long click"</span>, Toast.LENGTH_SHORT).show();  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>2）指定多个id绑定事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//提示：这是可以自动生成的，大家不要什么都手动敲哦  </span></span><br><span class="line">    <span class="meta">@OnClick</span>(&#123;R.id.ll_product_name, R.id.ll_product_lilv, R.id.ll_product_qixian, R.id.ll_product_repayment_methods&#125;)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">(View view)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;  </span><br><span class="line">            <span class="keyword">case</span> R.id.ll_product_name:  </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件1"</span>);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> R.id.ll_product_lilv:  </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件2"</span>);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> R.id.ll_product_qixian:  </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件3"</span>);  </span><br><span class="line">  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> R.id.ll_product_repayment_methods:  </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件4"</span>);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><blockquote><p>下面是错误的写法，多条点击事件不可以用R2的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OnClick</span>(&#123;R2.id.ll_product_name, R2.id.ll_product_lilv, R2.id.ll_product_qixian, R2.id.ll_product_repayment_methods&#125;)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">(View view)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;    </span><br><span class="line">            <span class="keyword">case</span> R2.id.ll_product_name:    </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件1"</span>);    </span><br><span class="line">                <span class="keyword">break</span>;    </span><br><span class="line">            <span class="keyword">case</span> R2.id.ll_product_lilv:    </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件2"</span>);    </span><br><span class="line">                <span class="keyword">break</span>;    </span><br><span class="line">            <span class="keyword">case</span> R2.id.ll_product_qixian:    </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件3"</span>);    </span><br><span class="line">    </span><br><span class="line">                <span class="keyword">break</span>;    </span><br><span class="line">            <span class="keyword">case</span> R2.id.ll_product_repayment_methods:    </span><br><span class="line">                System.out.print(<span class="string">"我是点击事件4"</span>);    </span><br><span class="line">                <span class="keyword">break</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);    </span><br><span class="line">        setContentView(R.layout.activity_butterknife);    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">//绑定activity    </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><br>如果一定要使用R2的写法，可以单一逐次写,下面写法是正确的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OnClick</span>(R2.id.ll_product_name)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked1</span><span class="params">(View view)</span> </span>&#123;    </span><br><span class="line">       System.out.print(<span class="string">"我是点击事件1"</span>);               </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@OnClick</span>(R2.id.ll_product_lilv)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked2</span><span class="params">(View view)</span> </span>&#123;    </span><br><span class="line">       System.out.print(<span class="string">"我是点击事件2"</span>);     </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="meta">@OnClick</span>(R2.id.ll_product_qixian)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked3</span><span class="params">(View view)</span> </span>&#123;    </span><br><span class="line">       System.out.print(<span class="string">"我是点击事件3"</span>);               </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@OnClick</span>(R2.id.ll_product_repayment_methods)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked4</span><span class="params">(View view)</span> </span>&#123;    </span><br><span class="line">       System.out.print(<span class="string">"我是点击事件4"</span>);               </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);    </span><br><span class="line">        setContentView(R.layout.activity_butterknife);    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">//绑定activity    </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><br>3）自定义View使用注解事件<br>Note：不用指定id，直接注解OnClick<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class MyButton extends Button &#123;  </span><br><span class="line">  @OnClick  </span><br><span class="line">  public void onClick() &#123;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="7-绑定监听"><a href="#7-绑定监听" class="headerlink" title="7.绑定监听"></a>7.绑定监听</h3><p>1）Listeners可以自动配置到方法中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(R.id.submit)  </span><br><span class="line">public void submit(View view) &#123;  </span><br><span class="line">  // TODO submit data to server...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2）对监听器方法的所有参数都是可选的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(R.id.submit)  </span><br><span class="line">public void submit() &#123;  </span><br><span class="line">  // TODO submit data to server...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3）定义一个特定类型，它将自动被转换。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(R.id.submit)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(Button button)</span> </span>&#123;<span class="comment">//看参数这里的变化就明白了  </span></span><br><span class="line">      button.setText(<span class="string">"Hello!"</span>);  </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><br>4）在单个绑定中指定多个id，用于公共事件处理。<br>5）自定义视图可以通过不指定ID来绑定到它们自己的监听器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;  </span><br><span class="line">  <span class="meta">@OnClick</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// TODO do something!  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6）Listener中多方法注解<br>方法注解，其对应的监听器有多个回调，可用于绑定到其中任何一个。每个注解都有一个它绑定的默认回调。使用回调参数指定一个替换。</p><p>eg：以Spinner为例<br>原始：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Spinner s=<span class="keyword">new</span> Spinner(<span class="keyword">this</span>);  </span><br><span class="line">       <span class="comment">//原始方法：Spinner 条目选择监听事件 正常写法  </span></span><br><span class="line">       s.setOnItemSelectedListener(<span class="keyword">new</span> AdapterView.OnItemSelectedListener()&#123;  </span><br><span class="line">           <span class="meta">@Override</span>  </span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;  </span><br><span class="line">           &#125;  </span><br><span class="line">           <span class="meta">@Override</span>  </span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; parent)</span> </span>&#123;  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;);  </span><br></pre></td></tr></table></figure><br>注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/*利用注解对Spinner item  作选择监听事件处理方式*/</span>  </span><br><span class="line">    <span class="meta">@OnItemSelected</span>(R.id.my_spiner)<span class="comment">//默认callback为ITEM_SELECTED  </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;  </span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"position: "</span> + position, Toast.LENGTH_SHORT).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    * 注解onNothingSelected，需要在注解参数添加一个callback， </span></span><br><span class="line"><span class="comment">    * 注意的是Spinner中只要有数据,默认都会选中第0个数据,所以想进入到onNothingSelected()方法,就需要把Adapter中的数据都清空 </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">    <span class="meta">@OnItemSelected</span>(value = R.id.my_spiner, callback = OnItemSelected.Callback.NOTHING_SELECTED)  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Nothing"</span>, Toast.LENGTH_SHORT).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind( <span class="keyword">this</span> ) ;  </span><br><span class="line">        Spinner s=<span class="keyword">new</span> Spinner(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>7） @OnCheckedChanged监听的使用<br>原方法应是：setOnCheckedChangeListener()</p><p>在使用注解@OnCheckedChanged的时候，出现了CompoundButton这个参数，因为理解有误，传参有误，还出现了无法转换成CompoundButton的bug。正常使用该注解时，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnCheckedChanged</span>(&#123;R.id.XXX&#125;)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCheckedChangeListener</span><span class="params">(CompoundButton view, <span class="keyword">boolean</span> ischanged )</span></span>&#123;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数是CompoundButton是变化的按钮控件事件id，ischanged是指该控件是否被点击改变。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">RadioGroup</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/rg_main"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/white"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/rg_home"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:focusable</span>=<span class="string">"false"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/nav_one"</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/rg_wealth"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:focusable</span>=<span class="string">"false"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/nav_two"</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/rg_account"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:focusable</span>=<span class="string">"false"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/nav_four"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnCheckedChanged</span>(&#123;R.id.rg_home,R.id.rg_wealth,R.id.rg_account&#125;)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCheckedChangeListener</span><span class="params">(CompoundButton view, <span class="keyword">boolean</span> ischanged )</span></span>&#123;  </span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;  </span><br><span class="line">            <span class="keyword">case</span> R.id.rg_home:  </span><br><span class="line">                <span class="keyword">if</span> (ischanged)&#123;<span class="comment">//注意：这里一定要有这个判断，只有按钮被点击了，ischanged状态发生改变，才会执行下面的内容  </span></span><br><span class="line">                    <span class="comment">//这里写你的按钮变化状态的UI及相关逻辑  </span></span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> R.id.rg_wealth:  </span><br><span class="line">                <span class="keyword">if</span> (ischanged) &#123;  </span><br><span class="line">                    <span class="comment">//这里写你的按钮变化状态的UI及相关逻辑  </span></span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> R.id.rg_account:  </span><br><span class="line">                <span class="keyword">if</span> (ischanged) &#123;  </span><br><span class="line">                    <span class="comment">//这里写你的按钮变化状态的UI及相关逻辑  </span></span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">default</span>:  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><p>8）使用findById<br>Butter Knife仍然包含了findById()方法，用于仍需从一个view ，Activity，或者Dialog上初始化view的时候，并且它可以自动转换类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, <span class="keyword">null</span>);  </span><br><span class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);  </span><br><span class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);  </span><br><span class="line">ImageView iv = ButterKnife.findById(view, R.id.iv); </span><br></pre></td></tr></table></figure><p>9）设置多个view的属性<br>apply()</p><p>作用：允许您立即对列表中的所有视图进行操作。</p><p>Action和Setter接口</p><p>作用：Action和Setter接口允许指定简单的行为。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterknifeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@BindViews</span>(&#123;R2.id.first_name, R2.id.middle_name, R2.id.last_name&#125;)  </span><br><span class="line">    List&lt;EditText&gt; nameViews;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_butterknife);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//绑定activity  </span></span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);  </span><br><span class="line">        <span class="comment">//看不懂的小伙伴，多敲几遍代码，实际操作一下自然就懂了。相信我！如果你重复敲了10遍以上的代码，并认真思考了还没懂，欢迎给我评论留言。  </span></span><br><span class="line">          </span><br><span class="line">        <span class="comment">//设置多个view的属性  </span></span><br><span class="line">        <span class="comment">//方式1：传递值  </span></span><br><span class="line">        ButterKnife.apply(nameViews, DISABLE);  </span><br><span class="line">        <span class="comment">//方式2：指定值  </span></span><br><span class="line">        ButterKnife.apply(nameViews, ENABLED, <span class="keyword">false</span>);  </span><br><span class="line">        <span class="comment">////方式3 设置View的Property  </span></span><br><span class="line">        ButterKnife.apply(nameViews, View.ALPHA, <span class="number">0.0f</span>);<span class="comment">//一个Android属性也可以用于应用的方法。  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    * Action接口设置属性 </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Action&lt;View&gt; DISABLE = <span class="keyword">new</span> ButterKnife.Action&lt;View&gt;() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(View view, <span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">            view.setEnabled(<span class="keyword">false</span>);<span class="comment">//目的是使多个view都具备此属性  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    * Setter接口设置属性 </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Setter&lt;View, Boolean&gt; ENABLED = <span class="keyword">new</span> ButterKnife.Setter&lt;View, Boolean&gt;() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(View view, Boolean value, <span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">            view.setEnabled(value);<span class="comment">//目的是使多个view都具备此属性，可变boolean值是可以传递的  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><h2 id="Butter-Knife的代码混淆"><a href="#Butter-Knife的代码混淆" class="headerlink" title="Butter Knife的代码混淆"></a>Butter Knife的代码混淆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-keep class butterknife.** &#123; *; &#125;  </span><br><span class="line">-dontwarn butterknife.internal.**  </span><br><span class="line">-keep class **$$ViewBinder &#123; *; &#125;  </span><br><span class="line">  </span><br><span class="line">-keepclasseswithmembernames class * &#123;  </span><br><span class="line">    @butterknife.* &lt;fields&gt;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">-keepclasseswithmembernames class * &#123;  </span><br><span class="line">    @butterknife.* &lt;methods&gt;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
